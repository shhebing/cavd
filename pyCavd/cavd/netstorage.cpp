/* Generated by Cython 0.29 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29"
#define CYTHON_HEX_VERSION 0x001D00F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_USE_DICT_VERSIONS
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
        static PY_UINT64_T __pyx_dict_version = 0;\
        static PyObject *__pyx_dict_cached_value = NULL;\
        if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
            (VAR) = __pyx_dict_cached_value;\
        } else {\
            (VAR) = __pyx_dict_cached_value = (LOOKUP);\
            __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
        }\
    }
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cavd__netstorage
#define __PYX_HAVE_API__cavd__netstorage
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <string>
#include "../../zeo++/geometry.h"
#include <utility>
#include <map>
#include <set>
#include "../../zeo++/voronoicell.h"
#include "../../zeo++/networkstorage.h"
#include "../../zeo++/networkio.h"
#include "../../zeo++/network.h"
#include "../../zeo++/area_and_volume.h"
#include "../../zeo++/networkinfo.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "cavd\\netstorage.pyx",
  "cavd\\geometry.pxd",
  "cavd\\voronoicell.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_4cavd_8geometry_Xyz;
struct __pyx_obj_4cavd_8geometry_Point;
struct __pyx_obj_4cavd_11voronoicell_VorFace;
struct __pyx_obj_4cavd_11voronoicell_VorCell;
struct __pyx_obj_4cavd_11voronoicell_BasicVCell;
struct __pyx_obj_4cavd_10netstorage_Atom;
struct __pyx_obj_4cavd_10netstorage_AtomNetwork;
struct __pyx_obj_4cavd_10netstorage_VoronoiNode;
struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork;
struct __pyx_obj_4cavd_10netstorage_VoronoiEdge;
struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition;
struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr;

/* "cavd/geometry.pxd":22
 *         CPoint operator*(CPoint)
 * 
 * cdef class Xyz:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper declaration for Zeo++ XYZ class defined in geometry.h
 */
struct __pyx_obj_4cavd_8geometry_Xyz {
  PyObject_HEAD
  XYZ *thisptr;
};


/* "cavd/geometry.pxd":30
 * 
 * 
 * cdef class Point:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper declaration for Zeo++ Point class defined in geometry.h
 */
struct __pyx_obj_4cavd_8geometry_Point {
  PyObject_HEAD
  Point *thisptr;
};


/* "cavd/voronoicell.pxd":39
 * 
 * 
 * cdef class VorFace:             # <<<<<<<<<<<<<<
 *     cdef  VOR_FACE* thisptr
 * 
 */
struct __pyx_obj_4cavd_11voronoicell_VorFace {
  PyObject_HEAD
  VOR_FACE *thisptr;
};


/* "cavd/voronoicell.pxd":42
 *     cdef  VOR_FACE* thisptr
 * 
 * cdef class VorCell:             # <<<<<<<<<<<<<<
 *     cdef VOR_CELL* thisptr
 * 
 */
struct __pyx_obj_4cavd_11voronoicell_VorCell {
  PyObject_HEAD
  VOR_CELL *thisptr;
};


/* "cavd/voronoicell.pxd":45
 *     cdef VOR_CELL* thisptr
 * 
 * cdef class BasicVCell:             # <<<<<<<<<<<<<<
 *     cdef BASIC_VCELL* thisptr
 */
struct __pyx_obj_4cavd_11voronoicell_BasicVCell {
  PyObject_HEAD
  BASIC_VCELL *thisptr;
};


/* "cavd/netstorage.pxd":142
 *             VORONOI_NETWORK* vornet, ATOM_NETWORK* atmnet)
 * 
 * cdef class Atom:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ ATOM class.
 */
struct __pyx_obj_4cavd_10netstorage_Atom {
  PyObject_HEAD
  ATOM *thisptr;
};


/* "cavd/netstorage.pxd":148
 *     cdef ATOM* thisptr
 * 
 * cdef class AtomNetwork:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ ATOM_NETWORK class.
 */
struct __pyx_obj_4cavd_10netstorage_AtomNetwork {
  PyObject_HEAD
  ATOM_NETWORK *thisptr;
  int rad_flag;
};


/* "cavd/netstorage.pxd":157
 *     cdef bint rad_flag
 * 
 * cdef class VoronoiNode:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ VOR_NODE class.
 */
struct __pyx_obj_4cavd_10netstorage_VoronoiNode {
  PyObject_HEAD
  VOR_NODE *thisptr;
};


/* "cavd/netstorage.pxd":163
 *     cdef VOR_NODE* thisptr
 * 
 * cdef class VoronoiNetwork:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ VORONOI_NETWORK class.
 */
struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork {
  PyObject_HEAD
  VORONOI_NETWORK *thisptr;
};


/* "cavd/netstorage.pxd":169
 *     cdef VORONOI_NETWORK* thisptr
 * 
 * cdef class VoronoiEdge:             # <<<<<<<<<<<<<<
 *     """
 *     Cython wrapper class for Zeo++ VOR_EDGE class.
 */
struct __pyx_obj_4cavd_10netstorage_VoronoiEdge {
  PyObject_HEAD
  VOR_EDGE *thisptr;
};


/* "cavd/netstorage.pyx":489
 *             return c_Ri,c_Rf,c_Rif
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */
struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition {
  PyObject_HEAD
  PyObject *__pyx_v_edge_center;
};


/* "cavd/netstorage.pyx":527
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)             # <<<<<<<<<<<<<<
 *             if edge_center not in edge_centers:
 *                 edge_centers.append(edge_center)
 */
struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition *__pyx_outer_scope;
  PyObject *__pyx_v_x;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = PyFrame_Type.tp_basicsize - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* ClassMethod.proto */
#include "descrobject.h"
static PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cavd.geometry' */
static PyTypeObject *__pyx_ptype_4cavd_8geometry_Xyz = 0;
static PyTypeObject *__pyx_ptype_4cavd_8geometry_Point = 0;

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'cavd.voronoicell' */
static PyTypeObject *__pyx_ptype_4cavd_11voronoicell_VorFace = 0;
static PyTypeObject *__pyx_ptype_4cavd_11voronoicell_VorCell = 0;
static PyTypeObject *__pyx_ptype_4cavd_11voronoicell_BasicVCell = 0;

/* Module declarations from 'cavd.netinfo' */

/* Module declarations from 'cavd' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'cavd.netstorage' */
static PyTypeObject *__pyx_ptype_4cavd_10netstorage_Atom = 0;
static PyTypeObject *__pyx_ptype_4cavd_10netstorage_AtomNetwork = 0;
static PyTypeObject *__pyx_ptype_4cavd_10netstorage_VoronoiNode = 0;
static PyTypeObject *__pyx_ptype_4cavd_10netstorage_VoronoiNetwork = 0;
static PyTypeObject *__pyx_ptype_4cavd_10netstorage_VoronoiEdge = 0;
static PyTypeObject *__pyx_ptype_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition = 0;
static PyTypeObject *__pyx_ptype_4cavd_10netstorage___pyx_scope_struct_1_genexpr = 0;
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "cavd.netstorage"
extern int __pyx_module_is_main_cavd__netstorage;
int __pyx_module_is_main_cavd__netstorage = 0;

/* Implementation of 'cavd.netstorage' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_ValueError;
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_Atom[] = "Atom";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_c_Rf[] = "c_Rf";
static const char __pyx_k_c_Ri[] = "c_Ri";
static const char __pyx_k_date[] = "__date__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_c_Rif[] = "c_Rif";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_email[] = "__email__";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_radii[] = "radii";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_subNo[] = "subNo";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_atmnet[] = "atmnet";
static const char __pyx_k_author[] = "__author__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_vornet[] = "vornet";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_c_fname[] = "c_fname";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_shift_x[] = "shift_x";
static const char __pyx_k_shift_y[] = "shift_y";
static const char __pyx_k_shift_z[] = "shift_z";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_probeRad[] = "probeRad";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_rad_file[] = "rad_file";
static const char __pyx_k_rad_flag[] = "rad_flag";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_maintainer[] = "__maintainer__";
static const char __pyx_k_radialFlag[] = "radialFlag";
static const char __pyx_k_vornet_ptr[] = "vornet_ptr";
static const char __pyx_k_AtomNetwork[] = "AtomNetwork";
static const char __pyx_k_Dec_12_2013[] = "Dec 12, 2013";
static const char __pyx_k_VoronoiEdge[] = "VoronoiEdge";
static const char __pyx_k_VoronoiNode[] = "VoronoiNode";
static const char __pyx_k_atmnet_copy[] = "atmnet_copy";
static const char __pyx_k_conn_values[] = "conn_values";
static const char __pyx_k_storeRadius[] = "storeRadius";
static const char __pyx_k_c_atmnet_ptr[] = "c_atmnet_ptr";
static const char __pyx_k_read_from_V1[] = "read_from_V1";
static const char __pyx_k_saveVorCells[] = "saveVorCells";
static const char __pyx_k_cutoff_radius[] = "cutoff_radius";
static const char __pyx_k_read_from_ARC[] = "read_from_ARC";
static const char __pyx_k_read_from_CIF[] = "read_from_CIF";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_PerformVDError[] = "PerformVDError";
static const char __pyx_k_VoronoiNetwork[] = "VoronoiNetwork";
static const char __pyx_k_read_from_CSSR[] = "read_from_CSSR";
static const char __pyx_k_substituteSeed[] = "substituteSeed";
static const char __pyx_k_substitutionNo[] = "substitutionNo";
static const char __pyx_k_supercell_flag[] = "supercell_flag";
static const char __pyx_k_Bharat_Medasani[] = "Bharat Medasani";
static const char __pyx_k_cavd_netstorage[] = "cavd.netstorage";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_substitute_atoms[] = "substitute_atoms";
static const char __pyx_k_connection_values[] = "connection_values";
static const char __pyx_k_mbkumar_gmail_com[] = "mbkumar@gmail.com";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_cavd_netstorage_pyx[] = "cavd\\netstorage.pyx";
static const char __pyx_k_connection_values_list[] = "connection_values_list";
static const char __pyx_k_is_duplicate_perimeter_atoms[] = "is_duplicate_perimeter_atoms";
static const char __pyx_k_perform_voronoi_decomposition[] = "perform_voronoi_decomposition";
static const char __pyx_k_Cython_file_defining_methods_fo[] = "\nCython file defining methods for AtomNetwork and VoronoiNetowrk \ndeclared in netstorage.pxd file. \n";
static const char __pyx_k_This_value_is_not_supposed_to_be[] = "This value is not supposed to be modified";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_perform_voronoi_decomposition_lo[] = "perform_voronoi_decomposition.<locals>.genexpr";
static PyObject *__pyx_n_s_Atom;
static PyObject *__pyx_n_s_AtomNetwork;
static PyObject *__pyx_kp_s_Bharat_Medasani;
static PyObject *__pyx_kp_s_Dec_12_2013;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_PerformVDError;
static PyObject *__pyx_kp_s_This_value_is_not_supposed_to_be;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_VoronoiEdge;
static PyObject *__pyx_n_s_VoronoiNetwork;
static PyObject *__pyx_n_s_VoronoiNode;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_atmnet;
static PyObject *__pyx_n_s_atmnet_copy;
static PyObject *__pyx_n_s_author;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_c_Rf;
static PyObject *__pyx_n_s_c_Ri;
static PyObject *__pyx_n_s_c_Rif;
static PyObject *__pyx_n_s_c_atmnet_ptr;
static PyObject *__pyx_n_s_c_fname;
static PyObject *__pyx_n_s_cavd_netstorage;
static PyObject *__pyx_kp_s_cavd_netstorage_pyx;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_conn_values;
static PyObject *__pyx_n_s_connection_values;
static PyObject *__pyx_n_s_connection_values_list;
static PyObject *__pyx_n_s_cutoff_radius;
static PyObject *__pyx_n_s_date;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_email;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_is_duplicate_perimeter_atoms;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_maintainer;
static PyObject *__pyx_kp_s_mbkumar_gmail_com;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_perform_voronoi_decomposition;
static PyObject *__pyx_n_s_perform_voronoi_decomposition_lo;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_probeRad;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_rad_file;
static PyObject *__pyx_n_s_rad_flag;
static PyObject *__pyx_n_s_radialFlag;
static PyObject *__pyx_n_s_radii;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read_from_ARC;
static PyObject *__pyx_n_s_read_from_CIF;
static PyObject *__pyx_n_s_read_from_CSSR;
static PyObject *__pyx_n_s_read_from_V1;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_saveVorCells;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shift_x;
static PyObject *__pyx_n_s_shift_y;
static PyObject *__pyx_n_s_shift_z;
static PyObject *__pyx_n_s_storeRadius;
static PyObject *__pyx_n_s_subNo;
static PyObject *__pyx_n_s_substituteSeed;
static PyObject *__pyx_n_s_substitute_atoms;
static PyObject *__pyx_n_s_substitutionNo;
static PyObject *__pyx_n_s_supercell_flag;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_vornet;
static PyObject *__pyx_n_s_vornet_ptr;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static int __pyx_pf_4cavd_10netstorage_4Atom___cinit__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_4Atom_2__init__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self); /* proto */
static void __pyx_pf_4cavd_10netstorage_4Atom_4__dealloc__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_11cart_coords___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_4Atom_11cart_coords_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_coords); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_11frac_coords___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_4Atom_11frac_coords_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_coords); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_6radius___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_4Atom_6radius_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_radius); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_9atom_type___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_4Atom_9atom_type_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_atom_type); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_5label___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_4Atom_5label_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_9specialID___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_4Atom_9specialID_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_specialID); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_4mass___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_4Atom_4mass_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_mass); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_6charge___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_4Atom_6charge_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_charge); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cavd_10netstorage_11AtomNetwork___cinit__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_11AtomNetwork_2__init__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self); /* proto */
static void __pyx_pf_4cavd_10netstorage_11AtomNetwork_4__dealloc__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_12lattice_para___get__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_13lattice_angle___get__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_7lattice___get__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_9atoms_num___get__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_11AtomNetwork_9atoms_num_2__set__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_atoms_num); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_5atoms___get__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_6copy(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_8relative_to_absolute(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_10absolute_to_relative(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_z); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_12read_from_CIF(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_radii, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_14read_from_ARC(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_16read_from_CSSR(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_18read_from_V1(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_20write_to_CSSR(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_22write_to_CIF(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_24write_to_V1(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_26write_to_XYZ(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_supercell_flag, PyObject *__pyx_v_is_duplicate_perimeter_atoms); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_28write_to_VTK(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_30write_to_MOPAC(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_supercell_flag); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_32writeAtomNetVaspFile(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_storeRadius); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_34calculate_free_sphere_parameters(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_36through_VorNet(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_29perform_voronoi_decomposition_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_38perform_voronoi_decomposition(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_saveVorCells); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_40__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_42__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cavd_10netstorage_11VoronoiNode___cinit__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_11VoronoiNode_2__init__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self); /* proto */
static void __pyx_pf_4cavd_10netstorage_11VoronoiNode_4__dealloc__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiNode_6coords___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_11VoronoiNode_6coords_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_coords); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiNode_5label___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_11VoronoiNode_5label_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiNode_6radius___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_11VoronoiNode_6radius_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_rad); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiNode_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiNode_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge___cinit__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_2__init__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self); /* proto */
static void __pyx_pf_4cavd_10netstorage_11VoronoiEdge_4__dealloc__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_6origin___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_6origin_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, PyObject *__pyx_v_origin); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_6ending___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_6ending_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, PyObject *__pyx_v_ending); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_6radius___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_6radius_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, PyObject *__pyx_v_rad); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_4leng___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_4leng_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, PyObject *__pyx_v_length); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_8delta_uc___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_8delta_uc_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, PyObject *__pyx_v_delta_uc); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_10bot_coords___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_10bot_coords_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, PyObject *__pyx_v_coords); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cavd_10netstorage_14VoronoiNetwork___cinit__(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self); /* proto */
static int __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_2__init__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self); /* proto */
static void __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_4__dealloc__(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_6size(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_5nodes___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_5edges___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_8prune(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_radius); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_10analyze_writeto_XYZ(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_name, double __pyx_v_probeRad, PyObject *__pyx_v_atmnet, int __pyx_v_shift_x, int __pyx_v_shift_y, int __pyx_v_shift_z); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_12write_to_XYZ(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_filename, double __pyx_v_cutoff_radius); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_14perform_voronoi_decomposition(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_saveVorCells); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_16parse_symmetry(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_symm_label); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_substitute_atoms(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_substituteSeed, PyObject *__pyx_v_radialFlag); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_2connection_values(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_vornet); /* proto */
static PyObject *__pyx_pf_4cavd_10netstorage_4connection_values_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_vornet); /* proto */
static PyObject *__pyx_tp_new_4cavd_10netstorage_Atom(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cavd_10netstorage_AtomNetwork(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cavd_10netstorage_VoronoiNode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cavd_10netstorage_VoronoiNetwork(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cavd_10netstorage_VoronoiEdge(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cavd_10netstorage___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_2;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
/* Late includes */

/* "cavd/netstorage.pyx":36
 *     Class to store the information about atom (or ion) in a structure.
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ATOM()
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_4Atom_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cavd_10netstorage_4Atom_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom___cinit__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_4Atom___cinit__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ATOM *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cavd/netstorage.pyx":37
 *     """
 *     def __cinit__(self):
 *         self.thisptr = new ATOM()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  try {
    __pyx_t_1 = new ATOM();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 37, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "cavd/netstorage.pyx":36
 *     Class to store the information about atom (or ion) in a structure.
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ATOM()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.Atom.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":39
 *         self.thisptr = new ATOM()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_4Atom_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cavd_10netstorage_4Atom_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_2__init__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_4Atom_2__init__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":42
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_4cavd_10netstorage_4Atom_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cavd_10netstorage_4Atom_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4cavd_10netstorage_4Atom_4__dealloc__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cavd_10netstorage_4Atom_4__dealloc__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cavd/netstorage.pyx":43
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property cart_coords:
 */
  delete __pyx_v_self->thisptr;

  /* "cavd/netstorage.pyx":42
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cavd/netstorage.pyx":46
 * 
 *     property cart_coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = [self.thisptr.x, self.thisptr.y, self.thisptr.z]
 *             return coords
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_11cart_coords_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_11cart_coords_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_11cart_coords___get__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_11cart_coords___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self) {
  PyObject *__pyx_v_coords = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cavd/netstorage.pyx":47
 *     property cart_coords:
 *         def __get__(self):
 *             coords = [self.thisptr.x, self.thisptr.y, self.thisptr.z]             # <<<<<<<<<<<<<<
 *             return coords
 *         def __set__(self, coords):      # Don't set this
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_coords = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cavd/netstorage.pyx":48
 *         def __get__(self):
 *             coords = [self.thisptr.x, self.thisptr.y, self.thisptr.z]
 *             return coords             # <<<<<<<<<<<<<<
 *         def __set__(self, coords):      # Don't set this
 *             """
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_coords);
  __pyx_r = __pyx_v_coords;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":46
 * 
 *     property cart_coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = [self.thisptr.x, self.thisptr.y, self.thisptr.z]
 *             return coords
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cavd.netstorage.Atom.cart_coords.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coords);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":49
 *             coords = [self.thisptr.x, self.thisptr.y, self.thisptr.z]
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_4Atom_11cart_coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords); /*proto*/
static int __pyx_pw_4cavd_10netstorage_4Atom_11cart_coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_11cart_coords_2__set__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_coords));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_4Atom_11cart_coords_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":53
 *             This variable is not supposed to be modified manually
 *             """
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 53, __pyx_L1_error)

  /* "cavd/netstorage.pyx":54
 *             """
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.x = coords[0]             # <<<<<<<<<<<<<<
 *             self.thisptr.y = coords[1]
 *             self.thisptr.z = coords[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->x = __pyx_t_2;

  /* "cavd/netstorage.pyx":55
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]             # <<<<<<<<<<<<<<
 *             self.thisptr.z = coords[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->y = __pyx_t_2;

  /* "cavd/netstorage.pyx":56
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]
 *             self.thisptr.z = coords[2]             # <<<<<<<<<<<<<<
 * 
 *     property frac_coords:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->z = __pyx_t_2;

  /* "cavd/netstorage.pyx":49
 *             coords = [self.thisptr.x, self.thisptr.y, self.thisptr.z]
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.Atom.cart_coords.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":59
 * 
 *     property frac_coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = [self.thisptr.a_coord, self.thisptr.b_coord, self.thisptr.c_coord]
 *             return coords
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_11frac_coords_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_11frac_coords_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_11frac_coords___get__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_11frac_coords___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self) {
  PyObject *__pyx_v_coords = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cavd/netstorage.pyx":60
 *     property frac_coords:
 *         def __get__(self):
 *             coords = [self.thisptr.a_coord, self.thisptr.b_coord, self.thisptr.c_coord]             # <<<<<<<<<<<<<<
 *             return coords
 *         def __set__(self, coords):      # Don't set this
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->a_coord); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->b_coord); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->c_coord); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_coords = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cavd/netstorage.pyx":61
 *         def __get__(self):
 *             coords = [self.thisptr.a_coord, self.thisptr.b_coord, self.thisptr.c_coord]
 *             return coords             # <<<<<<<<<<<<<<
 *         def __set__(self, coords):      # Don't set this
 *             """
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_coords);
  __pyx_r = __pyx_v_coords;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":59
 * 
 *     property frac_coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = [self.thisptr.a_coord, self.thisptr.b_coord, self.thisptr.c_coord]
 *             return coords
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cavd.netstorage.Atom.frac_coords.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coords);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":62
 *             coords = [self.thisptr.a_coord, self.thisptr.b_coord, self.thisptr.c_coord]
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_4Atom_11frac_coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords); /*proto*/
static int __pyx_pw_4cavd_10netstorage_4Atom_11frac_coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_11frac_coords_2__set__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_coords));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_4Atom_11frac_coords_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":66
 *             This variable is not supposed to be modified manually
 *             """
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.a_coord = coords[0]
 *             self.thisptr.b_coord = coords[1]
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 66, __pyx_L1_error)

  /* "cavd/netstorage.pyx":67
 *             """
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.a_coord = coords[0]             # <<<<<<<<<<<<<<
 *             self.thisptr.b_coord = coords[1]
 *             self.thisptr.c_coord = coords[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->a_coord = __pyx_t_2;

  /* "cavd/netstorage.pyx":68
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.a_coord = coords[0]
 *             self.thisptr.b_coord = coords[1]             # <<<<<<<<<<<<<<
 *             self.thisptr.c_coord = coords[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->b_coord = __pyx_t_2;

  /* "cavd/netstorage.pyx":69
 *             self.thisptr.a_coord = coords[0]
 *             self.thisptr.b_coord = coords[1]
 *             self.thisptr.c_coord = coords[2]             # <<<<<<<<<<<<<<
 * 
 *     property radius:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->c_coord = __pyx_t_2;

  /* "cavd/netstorage.pyx":62
 *             coords = [self.thisptr.a_coord, self.thisptr.b_coord, self.thisptr.c_coord]
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.Atom.frac_coords.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":72
 * 
 *     property radius:
 *         def __get__(self): return self.thisptr.radius             # <<<<<<<<<<<<<<
 *         def __set__(self, radius):
 *             print ("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_6radius_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_6radius_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_6radius___get__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_6radius___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->radius); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.Atom.radius.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":73
 *     property radius:
 *         def __get__(self): return self.thisptr.radius
 *         def __set__(self, radius):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.radius = radius
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_4Atom_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_radius); /*proto*/
static int __pyx_pw_4cavd_10netstorage_4Atom_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_radius) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_6radius_2__set__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_radius));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_4Atom_6radius_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_radius) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":74
 *         def __get__(self): return self.thisptr.radius
 *         def __set__(self, radius):
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.radius = radius
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 74, __pyx_L1_error)

  /* "cavd/netstorage.pyx":75
 *         def __set__(self, radius):
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.radius = radius             # <<<<<<<<<<<<<<
 * 
 *     property atom_type:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_radius); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 75, __pyx_L1_error)
  __pyx_v_self->thisptr->radius = __pyx_t_1;

  /* "cavd/netstorage.pyx":73
 *     property radius:
 *         def __get__(self): return self.thisptr.radius
 *         def __set__(self, radius):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.radius = radius
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.Atom.radius.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":78
 * 
 *     property atom_type:
 *         def __get__(self): return self.thisptr.atom_type.decode('utf-8')             # <<<<<<<<<<<<<<
 *         def __set__(self, atom_type):
 *             print ("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_9atom_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_9atom_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_9atom_type___get__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_9atom_type___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->type, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.Atom.atom_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":79
 *     property atom_type:
 *         def __get__(self): return self.thisptr.atom_type.decode('utf-8')
 *         def __set__(self, atom_type):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.atom_type = atom_type
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_4Atom_9atom_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_atom_type); /*proto*/
static int __pyx_pw_4cavd_10netstorage_4Atom_9atom_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_atom_type) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_9atom_type_2__set__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_atom_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_4Atom_9atom_type_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_atom_type) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":80
 *         def __get__(self): return self.thisptr.atom_type.decode('utf-8')
 *         def __set__(self, atom_type):
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.atom_type = atom_type
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 80, __pyx_L1_error)

  /* "cavd/netstorage.pyx":81
 *         def __set__(self, atom_type):
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.atom_type = atom_type             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_atom_type); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 81, __pyx_L1_error)
  __pyx_v_self->thisptr->type = __pyx_t_1;

  /* "cavd/netstorage.pyx":79
 *     property atom_type:
 *         def __get__(self): return self.thisptr.atom_type.decode('utf-8')
 *         def __set__(self, atom_type):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.atom_type = atom_type
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.Atom.atom_type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":84
 * 
 *     property label:
 *         def __get__(self): return self.thisptr.label.decode('utf-8')             # <<<<<<<<<<<<<<
 *         def __set__(self, label):
 *             print ("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_5label___get__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_5label___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->label, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.Atom.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":85
 *     property label:
 *         def __get__(self): return self.thisptr.label.decode('utf-8')
 *         def __set__(self, label):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.label = label
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_4Atom_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_label); /*proto*/
static int __pyx_pw_4cavd_10netstorage_4Atom_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_label) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_5label_2__set__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_label));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_4Atom_5label_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_label) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":86
 *         def __get__(self): return self.thisptr.label.decode('utf-8')
 *         def __set__(self, label):
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.label = label
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 86, __pyx_L1_error)

  /* "cavd/netstorage.pyx":87
 *         def __set__(self, label):
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.label = label             # <<<<<<<<<<<<<<
 * 
 *     property specialID:
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_label); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 87, __pyx_L1_error)
  __pyx_v_self->thisptr->label = __pyx_t_1;

  /* "cavd/netstorage.pyx":85
 *     property label:
 *         def __get__(self): return self.thisptr.label.decode('utf-8')
 *         def __set__(self, label):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.label = label
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.Atom.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":90
 * 
 *     property specialID:
 *         def __get__(self): return self.thisptr.specialID             # <<<<<<<<<<<<<<
 *         def __set__(self, specialID):
 *             print ("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_9specialID_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_9specialID_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_9specialID___get__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_9specialID___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->specialID); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.Atom.specialID.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":91
 *     property specialID:
 *         def __get__(self): return self.thisptr.specialID
 *         def __set__(self, specialID):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.specialID = specialID
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_4Atom_9specialID_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_specialID); /*proto*/
static int __pyx_pw_4cavd_10netstorage_4Atom_9specialID_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_specialID) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_9specialID_2__set__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_specialID));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_4Atom_9specialID_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_specialID) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":92
 *         def __get__(self): return self.thisptr.specialID
 *         def __set__(self, specialID):
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.specialID = specialID
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 92, __pyx_L1_error)

  /* "cavd/netstorage.pyx":93
 *         def __set__(self, specialID):
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.specialID = specialID             # <<<<<<<<<<<<<<
 * 
 *     property mass:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_specialID); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 93, __pyx_L1_error)
  __pyx_v_self->thisptr->specialID = __pyx_t_1;

  /* "cavd/netstorage.pyx":91
 *     property specialID:
 *         def __get__(self): return self.thisptr.specialID
 *         def __set__(self, specialID):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.specialID = specialID
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.Atom.specialID.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":96
 * 
 *     property mass:
 *         def __get__(self): return self.thisptr.mass             # <<<<<<<<<<<<<<
 *         def __set__(self, mass):
 *             print ("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_4mass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_4mass_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_4mass___get__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_4mass___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->mass); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.Atom.mass.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":97
 *     property mass:
 *         def __get__(self): return self.thisptr.mass
 *         def __set__(self, mass):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.mass = mass
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_4Atom_4mass_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_mass); /*proto*/
static int __pyx_pw_4cavd_10netstorage_4Atom_4mass_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_mass) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_4mass_2__set__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_mass));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_4Atom_4mass_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_mass) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":98
 *         def __get__(self): return self.thisptr.mass
 *         def __set__(self, mass):
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.mass = mass
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 98, __pyx_L1_error)

  /* "cavd/netstorage.pyx":99
 *         def __set__(self, mass):
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.mass = mass             # <<<<<<<<<<<<<<
 * 
 *     property charge:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_mass); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 99, __pyx_L1_error)
  __pyx_v_self->thisptr->mass = __pyx_t_1;

  /* "cavd/netstorage.pyx":97
 *     property mass:
 *         def __get__(self): return self.thisptr.mass
 *         def __set__(self, mass):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.mass = mass
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.Atom.mass.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":102
 * 
 *     property charge:
 *         def __get__(self): return self.thisptr.charge             # <<<<<<<<<<<<<<
 *         def __set__(self, charge):
 *             print ("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_6charge_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_6charge_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_6charge___get__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_6charge___get__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->charge); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.Atom.charge.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":103
 *     property charge:
 *         def __get__(self): return self.thisptr.charge
 *         def __set__(self, charge):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.charge = charge
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_4Atom_6charge_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_charge); /*proto*/
static int __pyx_pw_4cavd_10netstorage_4Atom_6charge_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_charge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_6charge_2__set__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_charge));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_4Atom_6charge_2__set__(struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, PyObject *__pyx_v_charge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":104
 *         def __get__(self): return self.thisptr.charge
 *         def __set__(self, charge):
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.charge = charge
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 104, __pyx_L1_error)

  /* "cavd/netstorage.pyx":105
 *         def __set__(self, charge):
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.charge = charge             # <<<<<<<<<<<<<<
 * 
 * cdef class AtomNetwork:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_charge); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 105, __pyx_L1_error)
  __pyx_v_self->thisptr->charge = __pyx_t_1;

  /* "cavd/netstorage.pyx":103
 *     property charge:
 *         def __get__(self): return self.thisptr.charge
 *         def __set__(self, charge):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.charge = charge
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.Atom.charge.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_6__reduce_cython__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.Atom.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_4Atom_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_4Atom_8__setstate_cython__(((struct __pyx_obj_4cavd_10netstorage_Atom *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_4Atom_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_Atom *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.Atom.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":114
 *     #Contains a pointer to ATOM_NETWORK and a flag denoting whether radius
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ATOM_NETWORK()
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11AtomNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11AtomNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork___cinit__(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11AtomNetwork___cinit__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ATOM_NETWORK *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cavd/netstorage.pyx":115
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):
 *         self.thisptr = new ATOM_NETWORK()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  try {
    __pyx_t_1 = new ATOM_NETWORK();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 115, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "cavd/netstorage.pyx":114
 *     #Contains a pointer to ATOM_NETWORK and a flag denoting whether radius
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ATOM_NETWORK()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":117
 *         self.thisptr = new ATOM_NETWORK()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11AtomNetwork_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11AtomNetwork_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_2__init__(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11AtomNetwork_2__init__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":120
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_4cavd_10netstorage_11AtomNetwork_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cavd_10netstorage_11AtomNetwork_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4cavd_10netstorage_11AtomNetwork_4__dealloc__(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cavd_10netstorage_11AtomNetwork_4__dealloc__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cavd/netstorage.pyx":121
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property lattice_para:
 */
  delete __pyx_v_self->thisptr;

  /* "cavd/netstorage.pyx":120
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cavd/netstorage.pyx":124
 * 
 *     property lattice_para:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return [self.thisptr.a, self.thisptr.b, self.thisptr.c]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_12lattice_para_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_12lattice_para_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_12lattice_para___get__(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_12lattice_para___get__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cavd/netstorage.pyx":125
 *     property lattice_para:
 *         def __get__(self):
 *             return [self.thisptr.a, self.thisptr.b, self.thisptr.c]             # <<<<<<<<<<<<<<
 * 
 *     property lattice_angle:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->a); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->b); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->c); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":124
 * 
 *     property lattice_para:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return [self.thisptr.a, self.thisptr.b, self.thisptr.c]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.lattice_para.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":128
 * 
 *     property lattice_angle:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return [self.thisptr.alpha, self.thisptr.beta, self.thisptr.gamma]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_13lattice_angle_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_13lattice_angle_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_13lattice_angle___get__(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_13lattice_angle___get__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cavd/netstorage.pyx":129
 *     property lattice_angle:
 *         def __get__(self):
 *             return [self.thisptr.alpha, self.thisptr.beta, self.thisptr.gamma]             # <<<<<<<<<<<<<<
 * 
 *     property lattice:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->alpha); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->beta); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->gamma); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":128
 * 
 *     property lattice_angle:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return [self.thisptr.alpha, self.thisptr.beta, self.thisptr.gamma]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.lattice_angle.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":132
 * 
 *     property lattice:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             la = [self.thisptr.v_a.x, self.thisptr.v_a.y, self.thisptr.v_a.z]
 *             lb = [self.thisptr.v_b.x, self.thisptr.v_b.y, self.thisptr.v_b.z]
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_7lattice_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_7lattice_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_7lattice___get__(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_7lattice___get__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self) {
  PyObject *__pyx_v_la = NULL;
  PyObject *__pyx_v_lb = NULL;
  PyObject *__pyx_v_lc = NULL;
  PyObject *__pyx_v_lattice = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cavd/netstorage.pyx":133
 *     property lattice:
 *         def __get__(self):
 *             la = [self.thisptr.v_a.x, self.thisptr.v_a.y, self.thisptr.v_a.z]             # <<<<<<<<<<<<<<
 *             lb = [self.thisptr.v_b.x, self.thisptr.v_b.y, self.thisptr.v_b.z]
 *             lc = [self.thisptr.v_c.x, self.thisptr.v_c.y, self.thisptr.v_c.z]
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->v_a.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->v_a.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->v_a.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_la = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cavd/netstorage.pyx":134
 *         def __get__(self):
 *             la = [self.thisptr.v_a.x, self.thisptr.v_a.y, self.thisptr.v_a.z]
 *             lb = [self.thisptr.v_b.x, self.thisptr.v_b.y, self.thisptr.v_b.z]             # <<<<<<<<<<<<<<
 *             lc = [self.thisptr.v_c.x, self.thisptr.v_c.y, self.thisptr.v_c.z]
 *             lattice = [la, lb, lc]
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->thisptr->v_b.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->v_b.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->v_b.z); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_v_lb = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cavd/netstorage.pyx":135
 *             la = [self.thisptr.v_a.x, self.thisptr.v_a.y, self.thisptr.v_a.z]
 *             lb = [self.thisptr.v_b.x, self.thisptr.v_b.y, self.thisptr.v_b.z]
 *             lc = [self.thisptr.v_c.x, self.thisptr.v_c.y, self.thisptr.v_c.z]             # <<<<<<<<<<<<<<
 *             lattice = [la, lb, lc]
 *             return lattice
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->v_c.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->v_c.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->v_c.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_lc = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cavd/netstorage.pyx":136
 *             lb = [self.thisptr.v_b.x, self.thisptr.v_b.y, self.thisptr.v_b.z]
 *             lc = [self.thisptr.v_c.x, self.thisptr.v_c.y, self.thisptr.v_c.z]
 *             lattice = [la, lb, lc]             # <<<<<<<<<<<<<<
 *             return lattice
 * 
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_la);
  __Pyx_GIVEREF(__pyx_v_la);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_la);
  __Pyx_INCREF(__pyx_v_lb);
  __Pyx_GIVEREF(__pyx_v_lb);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_v_lb);
  __Pyx_INCREF(__pyx_v_lc);
  __Pyx_GIVEREF(__pyx_v_lc);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_v_lc);
  __pyx_v_lattice = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cavd/netstorage.pyx":137
 *             lc = [self.thisptr.v_c.x, self.thisptr.v_c.y, self.thisptr.v_c.z]
 *             lattice = [la, lb, lc]
 *             return lattice             # <<<<<<<<<<<<<<
 * 
 *     property atoms_num:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_lattice);
  __pyx_r = __pyx_v_lattice;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":132
 * 
 *     property lattice:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             la = [self.thisptr.v_a.x, self.thisptr.v_a.y, self.thisptr.v_a.z]
 *             lb = [self.thisptr.v_b.x, self.thisptr.v_b.y, self.thisptr.v_b.z]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.lattice.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_la);
  __Pyx_XDECREF(__pyx_v_lb);
  __Pyx_XDECREF(__pyx_v_lc);
  __Pyx_XDECREF(__pyx_v_lattice);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":140
 * 
 *     property atoms_num:
 *         def __get__(self): return self.thisptr.no_atoms             # <<<<<<<<<<<<<<
 *         def __set__(self, atoms_num):
 *             print ("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_9atoms_num_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_9atoms_num_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_9atoms_num___get__(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_9atoms_num___get__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->numAtoms); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.atoms_num.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":141
 *     property atoms_num:
 *         def __get__(self): return self.thisptr.no_atoms
 *         def __set__(self, atoms_num):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.no_atoms = atoms_num
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11AtomNetwork_9atoms_num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_atoms_num); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11AtomNetwork_9atoms_num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_atoms_num) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_9atoms_num_2__set__(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_atoms_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11AtomNetwork_9atoms_num_2__set__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_atoms_num) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":142
 *         def __get__(self): return self.thisptr.no_atoms
 *         def __set__(self, atoms_num):
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.no_atoms = atoms_num
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 142, __pyx_L1_error)

  /* "cavd/netstorage.pyx":143
 *         def __set__(self, atoms_num):
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.no_atoms = atoms_num             # <<<<<<<<<<<<<<
 * 
 *     property atoms:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_atoms_num); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 143, __pyx_L1_error)
  __pyx_v_self->thisptr->numAtoms = __pyx_t_1;

  /* "cavd/netstorage.pyx":141
 *     property atoms_num:
 *         def __get__(self): return self.thisptr.no_atoms
 *         def __set__(self, atoms_num):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.no_atoms = atoms_num
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.atoms_num.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":146
 * 
 *     property atoms:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             atoms = []
 *             cdef vector[ATOM] c_atoms = self.thisptr.atoms
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_5atoms_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_5atoms_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_5atoms___get__(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_5atoms___get__(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self) {
  PyObject *__pyx_v_atoms = NULL;
  std::vector<ATOM>  __pyx_v_c_atoms;
  std::vector<ATOM> ::size_type __pyx_v_i;
  PyObject *__pyx_v_atom_type = NULL;
  PyObject *__pyx_v_atom_coords = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ATOM>  __pyx_t_2;
  std::vector<ATOM> ::size_type __pyx_t_3;
  std::vector<ATOM> ::size_type __pyx_t_4;
  std::vector<ATOM> ::size_type __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cavd/netstorage.pyx":147
 *     property atoms:
 *         def __get__(self):
 *             atoms = []             # <<<<<<<<<<<<<<
 *             cdef vector[ATOM] c_atoms = self.thisptr.atoms
 *             for i in range(c_atoms.size()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_atoms = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cavd/netstorage.pyx":148
 *         def __get__(self):
 *             atoms = []
 *             cdef vector[ATOM] c_atoms = self.thisptr.atoms             # <<<<<<<<<<<<<<
 *             for i in range(c_atoms.size()):
 *                 atom_type = c_atoms[i].atom_type.decode('utf-8')
 */
  __pyx_t_2 = __pyx_v_self->thisptr->atoms;
  __pyx_v_c_atoms = __pyx_t_2;

  /* "cavd/netstorage.pyx":149
 *             atoms = []
 *             cdef vector[ATOM] c_atoms = self.thisptr.atoms
 *             for i in range(c_atoms.size()):             # <<<<<<<<<<<<<<
 *                 atom_type = c_atoms[i].atom_type.decode('utf-8')
 *                 #atom_coords = [c_atoms[i].a_coord,c_atoms[i].b_coord,c_atoms[i].c_coord]
 */
  __pyx_t_3 = __pyx_v_c_atoms.size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "cavd/netstorage.pyx":150
 *             cdef vector[ATOM] c_atoms = self.thisptr.atoms
 *             for i in range(c_atoms.size()):
 *                 atom_type = c_atoms[i].atom_type.decode('utf-8')             # <<<<<<<<<<<<<<
 *                 #atom_coords = [c_atoms[i].a_coord,c_atoms[i].b_coord,c_atoms[i].c_coord]
 *                 atom_coords = [c_atoms[i].x,c_atoms[i].y,c_atoms[i].z]
 */
    __pyx_t_1 = __Pyx_decode_cpp_string((__pyx_v_c_atoms[__pyx_v_i]).type, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_atom_type, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cavd/netstorage.pyx":152
 *                 atom_type = c_atoms[i].atom_type.decode('utf-8')
 *                 #atom_coords = [c_atoms[i].a_coord,c_atoms[i].b_coord,c_atoms[i].c_coord]
 *                 atom_coords = [c_atoms[i].x,c_atoms[i].y,c_atoms[i].z]             # <<<<<<<<<<<<<<
 *                 atoms.append([atom_type, atom_coords])
 *             return atoms
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_c_atoms[__pyx_v_i]).x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyFloat_FromDouble((__pyx_v_c_atoms[__pyx_v_i]).y); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble((__pyx_v_c_atoms[__pyx_v_i]).z); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
    __pyx_t_1 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_atom_coords, ((PyObject*)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "cavd/netstorage.pyx":153
 *                 #atom_coords = [c_atoms[i].a_coord,c_atoms[i].b_coord,c_atoms[i].c_coord]
 *                 atom_coords = [c_atoms[i].x,c_atoms[i].y,c_atoms[i].z]
 *                 atoms.append([atom_type, atom_coords])             # <<<<<<<<<<<<<<
 *             return atoms
 * 
 */
    __pyx_t_8 = PyList_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_atom_type);
    __Pyx_GIVEREF(__pyx_v_atom_type);
    PyList_SET_ITEM(__pyx_t_8, 0, __pyx_v_atom_type);
    __Pyx_INCREF(__pyx_v_atom_coords);
    __Pyx_GIVEREF(__pyx_v_atom_coords);
    PyList_SET_ITEM(__pyx_t_8, 1, __pyx_v_atom_coords);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_atoms, __pyx_t_8); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 153, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }

  /* "cavd/netstorage.pyx":154
 *                 atom_coords = [c_atoms[i].x,c_atoms[i].y,c_atoms[i].z]
 *                 atoms.append([atom_type, atom_coords])
 *             return atoms             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_atoms);
  __pyx_r = __pyx_v_atoms;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":146
 * 
 *     property atoms:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             atoms = []
 *             cdef vector[ATOM] c_atoms = self.thisptr.atoms
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.atoms.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_atoms);
  __Pyx_XDECREF(__pyx_v_atom_type);
  __Pyx_XDECREF(__pyx_v_atom_coords);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":156
 *             return atoms
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Create a copy of the AtomNetwork instance
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_7copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_6copy[] = "\n        Create a copy of the AtomNetwork instance\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_7copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_6copy(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_6copy(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self) {
  struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_newatmnet = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "cavd/netstorage.pyx":160
 *         Create a copy of the AtomNetwork instance
 *         """
 *         newatmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         self.thisptr.copy(newatmnet.thisptr)
 *         newatmnet.rad_flag = self.rad_flag
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_newatmnet = ((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cavd/netstorage.pyx":161
 *         """
 *         newatmnet = AtomNetwork()
 *         self.thisptr.copy(newatmnet.thisptr)             # <<<<<<<<<<<<<<
 *         newatmnet.rad_flag = self.rad_flag
 *         return newatmnet
 */
  __pyx_v_self->thisptr->copy(__pyx_v_newatmnet->thisptr);

  /* "cavd/netstorage.pyx":162
 *         newatmnet = AtomNetwork()
 *         self.thisptr.copy(newatmnet.thisptr)
 *         newatmnet.rad_flag = self.rad_flag             # <<<<<<<<<<<<<<
 *         return newatmnet
 * 
 */
  __pyx_t_2 = __pyx_v_self->rad_flag;
  __pyx_v_newatmnet->rad_flag = __pyx_t_2;

  /* "cavd/netstorage.pyx":163
 *         self.thisptr.copy(newatmnet.thisptr)
 *         newatmnet.rad_flag = self.rad_flag
 *         return newatmnet             # <<<<<<<<<<<<<<
 * 
 *     def relative_to_absolute(self, a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_newatmnet));
  __pyx_r = ((PyObject *)__pyx_v_newatmnet);
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":156
 *             return atoms
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Create a copy of the AtomNetwork instance
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_newatmnet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":165
 *         return newatmnet
 * 
 *     def relative_to_absolute(self, a, b, c):             # <<<<<<<<<<<<<<
 *         return [self.thisptr.abc_to_xyz(a, b, c).vals[0], self.thisptr.abc_to_xyz(a, b, c).vals[1], self.thisptr.abc_to_xyz(a, b, c).vals[2]]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_9relative_to_absolute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_9relative_to_absolute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_c = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("relative_to_absolute (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("relative_to_absolute", 1, 3, 3, 1); __PYX_ERR(1, 165, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("relative_to_absolute", 1, 3, 3, 2); __PYX_ERR(1, 165, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "relative_to_absolute") < 0)) __PYX_ERR(1, 165, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
    __pyx_v_c = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("relative_to_absolute", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 165, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.relative_to_absolute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_8relative_to_absolute(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_8relative_to_absolute(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("relative_to_absolute", 0);

  /* "cavd/netstorage.pyx":166
 * 
 *     def relative_to_absolute(self, a, b, c):
 *         return [self.thisptr.abc_to_xyz(a, b, c).vals[0], self.thisptr.abc_to_xyz(a, b, c).vals[1], self.thisptr.abc_to_xyz(a, b, c).vals[2]]             # <<<<<<<<<<<<<<
 * 
 *     def absolute_to_relative(self, x, y, z):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_a); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 166, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_b); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 166, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_c); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 166, __pyx_L1_error)
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->thisptr->abc_to_xyz(__pyx_t_1, __pyx_t_2, __pyx_t_3).vals[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_a); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 166, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_b); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 166, __pyx_L1_error)
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_c); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 166, __pyx_L1_error)
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->thisptr->abc_to_xyz(__pyx_t_3, __pyx_t_2, __pyx_t_1).vals[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_a); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 166, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_b); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 166, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_c); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 166, __pyx_L1_error)
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->thisptr->abc_to_xyz(__pyx_t_1, __pyx_t_2, __pyx_t_3).vals[2])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":165
 *         return newatmnet
 * 
 *     def relative_to_absolute(self, a, b, c):             # <<<<<<<<<<<<<<
 *         return [self.thisptr.abc_to_xyz(a, b, c).vals[0], self.thisptr.abc_to_xyz(a, b, c).vals[1], self.thisptr.abc_to_xyz(a, b, c).vals[2]]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.relative_to_absolute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":168
 *         return [self.thisptr.abc_to_xyz(a, b, c).vals[0], self.thisptr.abc_to_xyz(a, b, c).vals[1], self.thisptr.abc_to_xyz(a, b, c).vals[2]]
 * 
 *     def absolute_to_relative(self, x, y, z):             # <<<<<<<<<<<<<<
 *         return [self.thisptr.xyz_to_abc(x, y, z).vals[0], self.thisptr.xyz_to_abc(x, y, z).vals[1], self.thisptr.xyz_to_abc(x, y, z).vals[2]]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_11absolute_to_relative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_11absolute_to_relative(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_z = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("absolute_to_relative (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("absolute_to_relative", 1, 3, 3, 1); __PYX_ERR(1, 168, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("absolute_to_relative", 1, 3, 3, 2); __PYX_ERR(1, 168, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "absolute_to_relative") < 0)) __PYX_ERR(1, 168, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_z = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("absolute_to_relative", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 168, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.absolute_to_relative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_10absolute_to_relative(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_10absolute_to_relative(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("absolute_to_relative", 0);

  /* "cavd/netstorage.pyx":169
 * 
 *     def absolute_to_relative(self, x, y, z):
 *         return [self.thisptr.xyz_to_abc(x, y, z).vals[0], self.thisptr.xyz_to_abc(x, y, z).vals[1], self.thisptr.xyz_to_abc(x, y, z).vals[2]]             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_z); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->thisptr->xyz_to_abc(__pyx_t_1, __pyx_t_2, __pyx_t_3).vals[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_z); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->thisptr->xyz_to_abc(__pyx_t_3, __pyx_t_2, __pyx_t_1).vals[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_y); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_z); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->thisptr->xyz_to_abc(__pyx_t_1, __pyx_t_2, __pyx_t_3).vals[2])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":168
 *         return [self.thisptr.abc_to_xyz(a, b, c).vals[0], self.thisptr.abc_to_xyz(a, b, c).vals[1], self.thisptr.abc_to_xyz(a, b, c).vals[2]]
 * 
 *     def absolute_to_relative(self, x, y, z):             # <<<<<<<<<<<<<<
 *         return [self.thisptr.xyz_to_abc(x, y, z).vals[0], self.thisptr.xyz_to_abc(x, y, z).vals[1], self.thisptr.xyz_to_abc(x, y, z).vals[2]]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.absolute_to_relative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":172
 * 
 *     @classmethod
 *     def read_from_CIF(cls, filename, radii, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_13read_from_CIF(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_12read_from_CIF[] = "\n        Static method to create and populate the AtomNetwork with \n        atom data from a CIF file.\n        Arguments:\n            filename: \n                Input CIF file name.\n            rad_flag (optional):\n                Flag denoting whether atomic radii are non-zero.\n                Default is True\n            rad_file (optional):\n                Input file containing atomic radii\n                Works only when rad_flag is True.\n                If rad_file is not specified, Zeo++ default values are used.\n        Returns:\n            Instance of AtomNetwork\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_13read_from_CIF(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_radii = 0;
  PyObject *__pyx_v_rad_flag = 0;
  PyObject *__pyx_v_rad_file = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_CIF (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_radii,&__pyx_n_s_rad_flag,&__pyx_n_s_rad_file,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_True);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radii)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_from_CIF", 0, 2, 4, 1); __PYX_ERR(1, 172, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_flag);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_file);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_from_CIF") < 0)) __PYX_ERR(1, 172, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_radii = values[1];
    __pyx_v_rad_flag = values[2];
    __pyx_v_rad_file = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_from_CIF", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 172, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.read_from_CIF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_12read_from_CIF(((PyTypeObject*)__pyx_v_cls), __pyx_v_filename, __pyx_v_radii, __pyx_v_rad_flag, __pyx_v_rad_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_12read_from_CIF(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_radii, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file) {
  char *__pyx_v_c_rad_file;
  std::map<std::string,double>  __pyx_v_ionRadMap;
  std::string __pyx_v_c_key;
  double __pyx_v_c_value;
  PyObject *__pyx_v_key = NULL;
  struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  std::string __pyx_t_8;
  double __pyx_t_9;
  std::pair<std::string,double>  __pyx_t_10;
  __Pyx_RefNannySetupContext("read_from_CIF", 0);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_rad_file);

  /* "cavd/netstorage.pyx":190
 *         """
 *         #Calls Zeo++ readCIFFile function defined in networkio.cc.
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_rad_file); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":191
 *         #Calls Zeo++ readCIFFile function defined in networkio.cc.
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
 */
    if (unlikely(__pyx_v_rad_file == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 191, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_rad_file)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_rad_file, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":190
 *         """
 *         #Calls Zeo++ readCIFFile function defined in networkio.cc.
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  }

  /* "cavd/netstorage.pyx":192
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "cavd/netstorage.pyx":193
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         cdef char* c_rad_file
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 193, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":192
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":196
 * 
 *         cdef char* c_rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 #edited at 20180526
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 196, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "cavd/netstorage.pyx":197
 *         cdef char* c_rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 #edited at 20180526
 *                 #cavd.netinfo.zeo_initializeRadTable()
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_file); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 197, __pyx_L1_error)
    __pyx_t_2 = ((!__pyx_t_1) != 0);
    if (__pyx_t_2) {

      /* "cavd/netstorage.pyx":200
 *                 #edited at 20180526
 *                 #cavd.netinfo.zeo_initializeRadTable()
 *                 cavd.netinfo.zeo_initializeIonRadTable()             # <<<<<<<<<<<<<<
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file
 */
      initializeIonRadTable();

      /* "cavd/netstorage.pyx":197
 *         cdef char* c_rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 #edited at 20180526
 *                 #cavd.netinfo.zeo_initializeRadTable()
 */
      goto __pyx_L6;
    }

    /* "cavd/netstorage.pyx":202
 *                 cavd.netinfo.zeo_initializeIonRadTable()
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *                 cavd.netinfo.zeo_readIonRadTableFile(c_rad_file)
 * 
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 202, __pyx_L1_error)
      __pyx_v_c_rad_file = __pyx_t_4;

      /* "cavd/netstorage.pyx":203
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file
 *                 cavd.netinfo.zeo_readIonRadTableFile(c_rad_file)             # <<<<<<<<<<<<<<
 * 
 * 		#Added at 20180606
 */
      readIonRadTableFile(__pyx_v_c_rad_file);
    }
    __pyx_L6:;

    /* "cavd/netstorage.pyx":196
 * 
 *         cdef char* c_rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 #edited at 20180526
 */
  }

  /* "cavd/netstorage.pyx":209
 *         cdef string c_key
 *         cdef double c_value
 *         if radii:             # <<<<<<<<<<<<<<
 *             for key in radii:
 *                 c_key = (<unicode>key).encode('utf8')
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_radii); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 209, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":210
 *         cdef double c_value
 *         if radii:
 *             for key in radii:             # <<<<<<<<<<<<<<
 *                 c_key = (<unicode>key).encode('utf8')
 *                 c_value = radii[key]
 */
    if (likely(PyList_CheckExact(__pyx_v_radii)) || PyTuple_CheckExact(__pyx_v_radii)) {
      __pyx_t_3 = __pyx_v_radii; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_radii); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 210, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 210, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 210, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 210, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 210, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 210, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 210, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "cavd/netstorage.pyx":211
 *         if radii:
 *             for key in radii:
 *                 c_key = (<unicode>key).encode('utf8')             # <<<<<<<<<<<<<<
 *                 c_value = radii[key]
 *                 ionRadMap.insert(pair[string,double](c_key,c_value))
 */
      if (unlikely(__pyx_v_key == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
        __PYX_ERR(1, 211, __pyx_L1_error)
      }
      __pyx_t_7 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_key)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 211, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_c_key = __pyx_t_8;

      /* "cavd/netstorage.pyx":212
 *             for key in radii:
 *                 c_key = (<unicode>key).encode('utf8')
 *                 c_value = radii[key]             # <<<<<<<<<<<<<<
 *                 ionRadMap.insert(pair[string,double](c_key,c_value))
 *             cavd.netinfo.zeo_readIonRadTable(ionRadMap)
 */
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_radii, __pyx_v_key); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 212, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_c_value = __pyx_t_9;

      /* "cavd/netstorage.pyx":213
 *                 c_key = (<unicode>key).encode('utf8')
 *                 c_value = radii[key]
 *                 ionRadMap.insert(pair[string,double](c_key,c_value))             # <<<<<<<<<<<<<<
 *             cavd.netinfo.zeo_readIonRadTable(ionRadMap)
 * 
 */
      try {
        __pyx_t_10 = std::pair<std::string,double> (__pyx_v_c_key, __pyx_v_c_value);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 213, __pyx_L1_error)
      }
      try {
        __pyx_v_ionRadMap.insert(__pyx_t_10);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 213, __pyx_L1_error)
      }

      /* "cavd/netstorage.pyx":210
 *         cdef double c_value
 *         if radii:
 *             for key in radii:             # <<<<<<<<<<<<<<
 *                 c_key = (<unicode>key).encode('utf8')
 *                 c_value = radii[key]
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":214
 *                 c_value = radii[key]
 *                 ionRadMap.insert(pair[string,double](c_key,c_value))
 *             cavd.netinfo.zeo_readIonRadTable(ionRadMap)             # <<<<<<<<<<<<<<
 * 
 *         atmnet = AtomNetwork()
 */
    readIonRadTable(__pyx_v_ionRadMap);

    /* "cavd/netstorage.pyx":209
 *         cdef string c_key
 *         cdef double c_value
 *         if radii:             # <<<<<<<<<<<<<<
 *             for key in radii:
 *                 c_key = (<unicode>key).encode('utf8')
 */
  }

  /* "cavd/netstorage.pyx":216
 *             cavd.netinfo.zeo_readIonRadTable(ionRadMap)
 * 
 *         atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         cdef char* c_filename = filename
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_atmnet = ((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cavd/netstorage.pyx":217
 * 
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 217, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "cavd/netstorage.pyx":218
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 218, __pyx_L1_error)
  __pyx_t_1 = ((!(readCIFFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_2) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cavd/netstorage.pyx":219
 *         cdef char* c_filename = filename
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError             # <<<<<<<<<<<<<<
 *         atmnet.rad_flag = rad_flag
 *         return atmnet
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 219, __pyx_L1_error)

    /* "cavd/netstorage.pyx":218
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  }

  /* "cavd/netstorage.pyx":220
 *         if not readCIFFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 *         atmnet.rad_flag = rad_flag             # <<<<<<<<<<<<<<
 *         return atmnet
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 220, __pyx_L1_error)
  __pyx_v_atmnet->rad_flag = __pyx_t_1;

  /* "cavd/netstorage.pyx":221
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 *         return atmnet             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet));
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":172
 * 
 *     @classmethod
 *     def read_from_CIF(cls, filename, radii, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.read_from_CIF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XDECREF(__pyx_v_rad_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":224
 * 
 *     @classmethod
 *     def read_from_ARC(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_15read_from_ARC(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_14read_from_ARC[] = "\n        Static method to create and populate the AtomNetwork with \n        atom data from a ARC file.\n        Arguments:\n            filename: \n                Input ARC file name.\n            rad_flag (optional):\n                Flag denoting whether atomic radii are non-zero.\n                Default is True\n            rad_file (optional):\n                Input file containing atomic radii\n                Works only when rad_flag is True.\n                If rad_file is not specified, default values are used.\n        Returns:\n            Instance of AtomNetwork\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_15read_from_ARC(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_rad_flag = 0;
  PyObject *__pyx_v_rad_file = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_ARC (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_rad_flag,&__pyx_n_s_rad_file,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_True);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_flag);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_file);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_from_ARC") < 0)) __PYX_ERR(1, 224, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_rad_flag = values[1];
    __pyx_v_rad_file = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_from_ARC", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 224, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.read_from_ARC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_14read_from_ARC(((PyTypeObject*)__pyx_v_cls), __pyx_v_filename, __pyx_v_rad_flag, __pyx_v_rad_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_14read_from_ARC(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file) {
  char *__pyx_v_c_rad_file;
  struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("read_from_ARC", 0);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_rad_file);

  /* "cavd/netstorage.pyx":241
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_rad_file); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":242
 *         """
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
 */
    if (unlikely(__pyx_v_rad_file == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 242, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_rad_file)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_rad_file, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":241
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  }

  /* "cavd/netstorage.pyx":243
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "cavd/netstorage.pyx":244
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ readARCFile function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 244, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":243
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":247
 * 
 *         #Calls Zeo++ readARCFile function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *         if rad_flag:
 *             if not rad_file:
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 247, __pyx_L1_error)
  __pyx_v_c_rad_file = __pyx_t_4;

  /* "cavd/netstorage.pyx":248
 *         #Calls Zeo++ readARCFile function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 cavd.netinfo.zeo_initializeRadTable()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 248, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "cavd/netstorage.pyx":249
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 cavd.netinfo.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_file); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 249, __pyx_L1_error)
    __pyx_t_2 = ((!__pyx_t_1) != 0);
    if (__pyx_t_2) {

      /* "cavd/netstorage.pyx":250
 *         if rad_flag:
 *             if not rad_file:
 *                 cavd.netinfo.zeo_initializeRadTable()             # <<<<<<<<<<<<<<
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file
 */
      initializeRadTable();

      /* "cavd/netstorage.pyx":249
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 cavd.netinfo.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 */
      goto __pyx_L6;
    }

    /* "cavd/netstorage.pyx":252
 *                 cavd.netinfo.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *                 cavd.netinfo.zeo_readRadTable(c_rad_file)
 * 
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 252, __pyx_L1_error)
      __pyx_v_c_rad_file = __pyx_t_4;

      /* "cavd/netstorage.pyx":253
 *             else:       # rad_file is defined
 *                 c_rad_file = rad_file
 *                 cavd.netinfo.zeo_readRadTable(c_rad_file)             # <<<<<<<<<<<<<<
 * 
 *         atmnet = AtomNetwork()
 */
      readRadTable(__pyx_v_c_rad_file);
    }
    __pyx_L6:;

    /* "cavd/netstorage.pyx":248
 *         #Calls Zeo++ readARCFile function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 cavd.netinfo.zeo_initializeRadTable()
 */
  }

  /* "cavd/netstorage.pyx":255
 *                 cavd.netinfo.zeo_readRadTable(c_rad_file)
 * 
 *         atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         cdef char* c_filename = filename
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_atmnet = ((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cavd/netstorage.pyx":256
 * 
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 256, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "cavd/netstorage.pyx":257
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 257, __pyx_L1_error)
  __pyx_t_1 = ((!(readARCFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_2) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cavd/netstorage.pyx":258
 *         cdef char* c_filename = filename
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError             # <<<<<<<<<<<<<<
 *         atmnet.rad_flag = rad_flag
 *         return atmnet
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 258, __pyx_L1_error)

    /* "cavd/netstorage.pyx":257
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  }

  /* "cavd/netstorage.pyx":259
 *         if not readARCFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 *         atmnet.rad_flag = rad_flag             # <<<<<<<<<<<<<<
 *         return atmnet
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 259, __pyx_L1_error)
  __pyx_v_atmnet->rad_flag = __pyx_t_1;

  /* "cavd/netstorage.pyx":260
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 *         return atmnet             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet));
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":224
 * 
 *     @classmethod
 *     def read_from_ARC(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.read_from_ARC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XDECREF(__pyx_v_rad_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":263
 * 
 *     @classmethod
 *     def read_from_CSSR(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_17read_from_CSSR(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_16read_from_CSSR[] = "\n        Static method to create and populate the AtomNetwork with \n        atom data from a CSSR file.\n        Arguments:\n            filename: \n                Input CSSR file name.\n            rad_flag (optional):\n                Flag denoting whether atomic radii are non-zero.\n                Default is True\n            rad_file (optional):\n                Input file containing atomic radii\n                Works only when rad_flag is True.\n                If rad_file is not specified, default values are used.\n        Returns:\n            Instance of AtomNetwork\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_17read_from_CSSR(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_rad_flag = 0;
  PyObject *__pyx_v_rad_file = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_CSSR (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_rad_flag,&__pyx_n_s_rad_file,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_True);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_flag);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_file);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_from_CSSR") < 0)) __PYX_ERR(1, 263, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_rad_flag = values[1];
    __pyx_v_rad_file = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_from_CSSR", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 263, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.read_from_CSSR", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_16read_from_CSSR(((PyTypeObject*)__pyx_v_cls), __pyx_v_filename, __pyx_v_rad_flag, __pyx_v_rad_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_16read_from_CSSR(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file) {
  char *__pyx_v_c_rad_file;
  struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("read_from_CSSR", 0);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_rad_file);

  /* "cavd/netstorage.pyx":280
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_rad_file); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":281
 *         """
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
 */
    if (unlikely(__pyx_v_rad_file == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 281, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_rad_file)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_rad_file, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":280
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  }

  /* "cavd/netstorage.pyx":282
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "cavd/netstorage.pyx":283
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ readCSSRFile function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 283, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":282
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":287
 *         #Calls Zeo++ readCSSRFile function defined in networkio.cc.
 *         cdef char* c_rad_file
 *         print (rad_flag, rad_file)             # <<<<<<<<<<<<<<
 *         if rad_flag:
 *             #if not rad_file:
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_rad_flag);
  __Pyx_GIVEREF(__pyx_v_rad_flag);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_rad_flag);
  __Pyx_INCREF(__pyx_v_rad_file);
  __Pyx_GIVEREF(__pyx_v_rad_file);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_rad_file);
  if (__Pyx_PrintOne(0, __pyx_t_3) < 0) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cavd/netstorage.pyx":288
 *         cdef char* c_rad_file
 *         print (rad_flag, rad_file)
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             #if not rad_file:
 *             cavd.netinfo.zeo_initializeRadTable()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 288, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "cavd/netstorage.pyx":290
 *         if rad_flag:
 *             #if not rad_file:
 *             cavd.netinfo.zeo_initializeRadTable()             # <<<<<<<<<<<<<<
 *             if rad_file:       # rad_file is defined
 *                 c_rad_file = rad_file
 */
    initializeRadTable();

    /* "cavd/netstorage.pyx":291
 *             #if not rad_file:
 *             cavd.netinfo.zeo_initializeRadTable()
 *             if rad_file:       # rad_file is defined             # <<<<<<<<<<<<<<
 *                 c_rad_file = rad_file
 *                 cavd.netinfo.zeo_readRadTable(c_rad_file)
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_file); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 291, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "cavd/netstorage.pyx":292
 *             cavd.netinfo.zeo_initializeRadTable()
 *             if rad_file:       # rad_file is defined
 *                 c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *                 cavd.netinfo.zeo_readRadTable(c_rad_file)
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 292, __pyx_L1_error)
      __pyx_v_c_rad_file = __pyx_t_4;

      /* "cavd/netstorage.pyx":293
 *             if rad_file:       # rad_file is defined
 *                 c_rad_file = rad_file
 *                 cavd.netinfo.zeo_readRadTable(c_rad_file)             # <<<<<<<<<<<<<<
 * 
 *         atmnet = AtomNetwork()
 */
      readRadTable(__pyx_v_c_rad_file);

      /* "cavd/netstorage.pyx":291
 *             #if not rad_file:
 *             cavd.netinfo.zeo_initializeRadTable()
 *             if rad_file:       # rad_file is defined             # <<<<<<<<<<<<<<
 *                 c_rad_file = rad_file
 *                 cavd.netinfo.zeo_readRadTable(c_rad_file)
 */
    }

    /* "cavd/netstorage.pyx":288
 *         cdef char* c_rad_file
 *         print (rad_flag, rad_file)
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             #if not rad_file:
 *             cavd.netinfo.zeo_initializeRadTable()
 */
  }

  /* "cavd/netstorage.pyx":295
 *                 cavd.netinfo.zeo_readRadTable(c_rad_file)
 * 
 *         atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         cdef char* c_filename = filename
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_atmnet = ((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cavd/netstorage.pyx":296
 * 
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 296, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "cavd/netstorage.pyx":297
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 297, __pyx_L1_error)
  __pyx_t_2 = ((!(readCSSRFile(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_1) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cavd/netstorage.pyx":298
 *         cdef char* c_filename = filename
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError             # <<<<<<<<<<<<<<
 *         atmnet.rad_flag = rad_flag
 *         return atmnet
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 298, __pyx_L1_error)

    /* "cavd/netstorage.pyx":297
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  }

  /* "cavd/netstorage.pyx":299
 *         if not readCSSRFile(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 *         atmnet.rad_flag = rad_flag             # <<<<<<<<<<<<<<
 *         return atmnet
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 299, __pyx_L1_error)
  __pyx_v_atmnet->rad_flag = __pyx_t_2;

  /* "cavd/netstorage.pyx":300
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 *         return atmnet             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet));
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":263
 * 
 *     @classmethod
 *     def read_from_CSSR(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.read_from_CSSR", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XDECREF(__pyx_v_rad_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":303
 * 
 *     @classmethod
 *     def read_from_V1(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_19read_from_V1(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_18read_from_V1[] = "\n        Static method to create and populate the AtomNetwork with \n        atom data from a V1 file.\n        Arguments:\n            filename: \n                Input V1 file name.\n            rad_flag (optional):\n                Flag denoting whether atomic radii are non-zero.\n                Default is True\n            rad_file (optional):\n                Input file containing atomic radii\n                Works only when rad_flag is True.\n                If rad_file is not specified, default values are used.\n        Returns:\n            Instance of AtomNetwork\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_19read_from_V1(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_rad_flag = 0;
  PyObject *__pyx_v_rad_file = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_V1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_rad_flag,&__pyx_n_s_rad_file,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_True);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_flag);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rad_file);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_from_V1") < 0)) __PYX_ERR(1, 303, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_rad_flag = values[1];
    __pyx_v_rad_file = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_from_V1", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 303, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.read_from_V1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_18read_from_V1(((PyTypeObject*)__pyx_v_cls), __pyx_v_filename, __pyx_v_rad_flag, __pyx_v_rad_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_18read_from_V1(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename, PyObject *__pyx_v_rad_flag, PyObject *__pyx_v_rad_file) {
  char *__pyx_v_c_rad_file;
  struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_atmnet = NULL;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("read_from_V1", 0);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_rad_file);

  /* "cavd/netstorage.pyx":320
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_rad_file); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":321
 *         """
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
 */
    if (unlikely(__pyx_v_rad_file == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 321, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_rad_file)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_rad_file, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":320
 *             Instance of AtomNetwork
 *         """
 *         if isinstance(rad_file, unicode):             # <<<<<<<<<<<<<<
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 */
  }

  /* "cavd/netstorage.pyx":322
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "cavd/netstorage.pyx":323
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ readV1File function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 323, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":322
 *         if isinstance(rad_file, unicode):
 *             rad_file = (<unicode>rad_file).encode('utf8')
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":326
 * 
 *         #Calls Zeo++ readV1File function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file             # <<<<<<<<<<<<<<
 *         if rad_flag:
 *             if not rad_file:
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_rad_file); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 326, __pyx_L1_error)
  __pyx_v_c_rad_file = __pyx_t_4;

  /* "cavd/netstorage.pyx":327
 *         #Calls Zeo++ readV1File function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 cavd.netinfo.zeo_initializeRadTable()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 327, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "cavd/netstorage.pyx":328
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 cavd.netinfo.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_file); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 328, __pyx_L1_error)
    __pyx_t_2 = ((!__pyx_t_1) != 0);
    if (__pyx_t_2) {

      /* "cavd/netstorage.pyx":329
 *         if rad_flag:
 *             if not rad_file:
 *                 cavd.netinfo.zeo_initializeRadTable()             # <<<<<<<<<<<<<<
 *             else:       # rad_file is defined
 *                 cavd.netinfo.zeo_readRadTable(c_rad_file)
 */
      initializeRadTable();

      /* "cavd/netstorage.pyx":328
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:
 *             if not rad_file:             # <<<<<<<<<<<<<<
 *                 cavd.netinfo.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 */
      goto __pyx_L6;
    }

    /* "cavd/netstorage.pyx":331
 *                 cavd.netinfo.zeo_initializeRadTable()
 *             else:       # rad_file is defined
 *                 cavd.netinfo.zeo_readRadTable(c_rad_file)             # <<<<<<<<<<<<<<
 * 
 *         atmnet = AtomNetwork()
 */
    /*else*/ {
      readRadTable(__pyx_v_c_rad_file);
    }
    __pyx_L6:;

    /* "cavd/netstorage.pyx":327
 *         #Calls Zeo++ readV1File function defined in networkio.cc.
 *         cdef char* c_rad_file = rad_file
 *         if rad_flag:             # <<<<<<<<<<<<<<
 *             if not rad_file:
 *                 cavd.netinfo.zeo_initializeRadTable()
 */
  }

  /* "cavd/netstorage.pyx":333
 *                 cavd.netinfo.zeo_readRadTable(c_rad_file)
 * 
 *         atmnet = AtomNetwork()             # <<<<<<<<<<<<<<
 *         cdef char* c_filename = filename
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_atmnet = ((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cavd/netstorage.pyx":334
 * 
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 334, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "cavd/netstorage.pyx":335
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 335, __pyx_L1_error)
  __pyx_t_1 = ((!(readV1File(__pyx_v_c_filename, __pyx_v_atmnet->thisptr, __pyx_t_2) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cavd/netstorage.pyx":336
 *         cdef char* c_filename = filename
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError             # <<<<<<<<<<<<<<
 *         atmnet.rad_flag = rad_flag
 *         return atmnet
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 336, __pyx_L1_error)

    /* "cavd/netstorage.pyx":335
 *         atmnet = AtomNetwork()
 *         cdef char* c_filename = filename
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):             # <<<<<<<<<<<<<<
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 */
  }

  /* "cavd/netstorage.pyx":337
 *         if not readV1File(c_filename, atmnet.thisptr, rad_flag):
 *             raise IOError
 *         atmnet.rad_flag = rad_flag             # <<<<<<<<<<<<<<
 *         return atmnet
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rad_flag); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 337, __pyx_L1_error)
  __pyx_v_atmnet->rad_flag = __pyx_t_1;

  /* "cavd/netstorage.pyx":338
 *             raise IOError
 *         atmnet.rad_flag = rad_flag
 *         return atmnet             # <<<<<<<<<<<<<<
 * 
 *     def write_to_CSSR(self, filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet));
  __pyx_r = ((PyObject *)__pyx_v_atmnet);
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":303
 * 
 *     @classmethod
 *     def read_from_V1(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.read_from_V1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XDECREF(__pyx_v_rad_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":340
 *         return atmnet
 * 
 *     def write_to_CSSR(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CSSR file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_21write_to_CSSR(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_20write_to_CSSR[] = "\n        Writes the atom data in AtomNetwork to a CSSR file.\n        Arguments:\n            filename: \n                Output CSSR file name.\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_21write_to_CSSR(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_CSSR (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_20write_to_CSSR(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_20write_to_CSSR(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("write_to_CSSR", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "cavd/netstorage.pyx":347
 *                 Output CSSR file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":348
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToCSSR function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 348, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":347
 *                 Output CSSR file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":351
 * 
 *         #Calls Zeo++ writeToCSSR function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToCSSR(c_filename, self.thisptr):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 351, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "cavd/netstorage.pyx":352
 *         #Calls Zeo++ writeToCSSR function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToCSSR(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  __pyx_t_2 = ((!(writeToCSSR(__pyx_v_c_filename, __pyx_v_self->thisptr) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cavd/netstorage.pyx":353
 *         cdef char* c_filename = filename
 *         if not writeToCSSR(c_filename, self.thisptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_CIF(self, filename):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 353, __pyx_L1_error)

    /* "cavd/netstorage.pyx":352
 *         #Calls Zeo++ writeToCSSR function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToCSSR(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  }

  /* "cavd/netstorage.pyx":340
 *         return atmnet
 * 
 *     def write_to_CSSR(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CSSR file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.write_to_CSSR", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":355
 *             raise IOError
 * 
 *     def write_to_CIF(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CIF file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_23write_to_CIF(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_22write_to_CIF[] = "\n        Writes the atom data in AtomNetwork to a CIF file.\n        Arguments:\n            filename: \n                Output CIF file name.\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_23write_to_CIF(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_CIF (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_22write_to_CIF(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_22write_to_CIF(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("write_to_CIF", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "cavd/netstorage.pyx":362
 *                 Output CIF file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":363
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToCIF function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 363, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":362
 *                 Output CIF file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":366
 * 
 *         #Calls Zeo++ writeToCIF function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToCIF(c_filename, self.thisptr):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 366, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "cavd/netstorage.pyx":367
 *         #Calls Zeo++ writeToCIF function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToCIF(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  __pyx_t_2 = ((!(writeToCIF(__pyx_v_c_filename, __pyx_v_self->thisptr) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cavd/netstorage.pyx":368
 *         cdef char* c_filename = filename
 *         if not writeToCIF(c_filename, self.thisptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_V1(self, filename):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 368, __pyx_L1_error)

    /* "cavd/netstorage.pyx":367
 *         #Calls Zeo++ writeToCIF function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToCIF(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  }

  /* "cavd/netstorage.pyx":355
 *             raise IOError
 * 
 *     def write_to_CIF(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a CIF file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.write_to_CIF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":370
 *             raise IOError
 * 
 *     def write_to_V1(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a V1 file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_25write_to_V1(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_24write_to_V1[] = "\n        Writes the atom data in AtomNetwork to a V1 file.\n        Arguments:\n            filename: \n                Output V1 file name.\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_25write_to_V1(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_V1 (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_24write_to_V1(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_24write_to_V1(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("write_to_V1", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "cavd/netstorage.pyx":377
 *                 Output V1 file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":378
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToV1 function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 378, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":377
 *                 Output V1 file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":381
 * 
 *         #Calls Zeo++ writeToV1 function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToV1(c_filename, self.thisptr):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 381, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "cavd/netstorage.pyx":382
 *         #Calls Zeo++ writeToV1 function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToV1(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  __pyx_t_2 = ((!(writeToV1(__pyx_v_c_filename, __pyx_v_self->thisptr) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cavd/netstorage.pyx":383
 *         cdef char* c_filename = filename
 *         if not writeToV1(c_filename, self.thisptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_XYZ(self, filename, supercell_flag,
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 383, __pyx_L1_error)

    /* "cavd/netstorage.pyx":382
 *         #Calls Zeo++ writeToV1 function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToV1(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  }

  /* "cavd/netstorage.pyx":370
 *             raise IOError
 * 
 *     def write_to_V1(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a V1 file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.write_to_V1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":385
 *             raise IOError
 * 
 *     def write_to_XYZ(self, filename, supercell_flag,             # <<<<<<<<<<<<<<
 *                      is_duplicate_perimeter_atoms):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_27write_to_XYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_26write_to_XYZ[] = "\n        Writes the atom data in AtomNetwork to an XYZ file.\n        Arguments:\n            filename: \n                Output XYZ file name.\n            supercell_flag:\n                Flag denoting whether to write 2x2x2 supercell.\n            is_duplicate_perimeter_atoms:\n                Flag denoting whether perimeter atoms need to be replicated.\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_27write_to_XYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_supercell_flag = 0;
  PyObject *__pyx_v_is_duplicate_perimeter_atoms = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_XYZ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_supercell_flag,&__pyx_n_s_is_duplicate_perimeter_atoms,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_supercell_flag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_to_XYZ", 1, 3, 3, 1); __PYX_ERR(1, 385, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_duplicate_perimeter_atoms)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_to_XYZ", 1, 3, 3, 2); __PYX_ERR(1, 385, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write_to_XYZ") < 0)) __PYX_ERR(1, 385, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_filename = values[0];
    __pyx_v_supercell_flag = values[1];
    __pyx_v_is_duplicate_perimeter_atoms = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_XYZ", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 385, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.write_to_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_26write_to_XYZ(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), __pyx_v_filename, __pyx_v_supercell_flag, __pyx_v_is_duplicate_perimeter_atoms);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_26write_to_XYZ(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_supercell_flag, PyObject *__pyx_v_is_duplicate_perimeter_atoms) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("write_to_XYZ", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "cavd/netstorage.pyx":397
 *                 Flag denoting whether perimeter atoms need to be replicated.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":398
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 398, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":397
 *                 Flag denoting whether perimeter atoms need to be replicated.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":401
 * 
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,
 *                 is_duplicate_perimeter_atoms):
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 401, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "cavd/netstorage.pyx":402
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,             # <<<<<<<<<<<<<<
 *                 is_duplicate_perimeter_atoms):
 *             raise IOError
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_supercell_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 402, __pyx_L1_error)

  /* "cavd/netstorage.pyx":403
 *         cdef char* c_filename = filename
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,
 *                 is_duplicate_perimeter_atoms):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_duplicate_perimeter_atoms); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 403, __pyx_L1_error)

  /* "cavd/netstorage.pyx":402
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,             # <<<<<<<<<<<<<<
 *                 is_duplicate_perimeter_atoms):
 *             raise IOError
 */
  __pyx_t_5 = ((!(writeToXYZ(__pyx_v_c_filename, __pyx_v_self->thisptr, __pyx_t_2, __pyx_t_1) != 0)) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "cavd/netstorage.pyx":404
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,
 *                 is_duplicate_perimeter_atoms):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_VTK(self, filename):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 404, __pyx_L1_error)

    /* "cavd/netstorage.pyx":402
 *         #Calls Zeo++ writeToXYZ function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToXYZ(c_filename, self.thisptr, supercell_flag,             # <<<<<<<<<<<<<<
 *                 is_duplicate_perimeter_atoms):
 *             raise IOError
 */
  }

  /* "cavd/netstorage.pyx":385
 *             raise IOError
 * 
 *     def write_to_XYZ(self, filename, supercell_flag,             # <<<<<<<<<<<<<<
 *                      is_duplicate_perimeter_atoms):
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.write_to_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":406
 *             raise IOError
 * 
 *     def write_to_VTK(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the boundary of unit cell within the AtomNetwork to a VTK file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_29write_to_VTK(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_28write_to_VTK[] = "\n        Writes the boundary of unit cell within the AtomNetwork to a VTK file.\n        Arguments:\n            filename: \n                Output VTK file name.\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_29write_to_VTK(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_VTK (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_28write_to_VTK(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_28write_to_VTK(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("write_to_VTK", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "cavd/netstorage.pyx":413
 *                 Output VTK file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":414
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         #Calls Zeo++ writeToVTK function defined in networkio.cc.
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 414, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":413
 *                 Output VTK file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":417
 * 
 *         #Calls Zeo++ writeToVTK function defined in networkio.cc.
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToVTK(c_filename, self.thisptr):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 417, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "cavd/netstorage.pyx":418
 *         #Calls Zeo++ writeToVTK function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToVTK(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  __pyx_t_2 = ((!(writeToVTK(__pyx_v_c_filename, __pyx_v_self->thisptr) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cavd/netstorage.pyx":419
 *         cdef char* c_filename = filename
 *         if not writeToVTK(c_filename, self.thisptr):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 *     def write_to_MOPAC(self, filename, supercell_flag):
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 419, __pyx_L1_error)

    /* "cavd/netstorage.pyx":418
 *         #Calls Zeo++ writeToVTK function defined in networkio.cc.
 *         cdef char* c_filename = filename
 *         if not writeToVTK(c_filename, self.thisptr):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  }

  /* "cavd/netstorage.pyx":406
 *             raise IOError
 * 
 *     def write_to_VTK(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the boundary of unit cell within the AtomNetwork to a VTK file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.write_to_VTK", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":421
 *             raise IOError
 * 
 *     def write_to_MOPAC(self, filename, supercell_flag):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a .mop file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_31write_to_MOPAC(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_30write_to_MOPAC[] = "\n        Writes the atom data in AtomNetwork to a .mop file.\n        Arguments:\n            filename: \n                Output MOPAC file name.\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_31write_to_MOPAC(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_supercell_flag = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_MOPAC (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_supercell_flag,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_supercell_flag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_to_MOPAC", 1, 2, 2, 1); __PYX_ERR(1, 421, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write_to_MOPAC") < 0)) __PYX_ERR(1, 421, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_supercell_flag = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_MOPAC", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 421, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.write_to_MOPAC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_30write_to_MOPAC(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), __pyx_v_filename, __pyx_v_supercell_flag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_30write_to_MOPAC(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_supercell_flag) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("write_to_MOPAC", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "cavd/netstorage.pyx":428
 *                 Output MOPAC file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":429
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         cdef char* c_filename = filename
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 429, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":428
 *                 Output MOPAC file name.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":431
 *             filename = (<unicode>filename).encode('utf8')
 * 
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeToMOPAC(c_filename, self.thisptr, supercell_flag):
 *              raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 431, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "cavd/netstorage.pyx":432
 * 
 *         cdef char* c_filename = filename
 *         if not writeToMOPAC(c_filename, self.thisptr, supercell_flag):             # <<<<<<<<<<<<<<
 *              raise IOError
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_supercell_flag); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 432, __pyx_L1_error)
  __pyx_t_1 = ((!(writeToMOPAC(__pyx_v_c_filename, __pyx_v_self->thisptr, __pyx_t_2) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cavd/netstorage.pyx":433
 *         cdef char* c_filename = filename
 *         if not writeToMOPAC(c_filename, self.thisptr, supercell_flag):
 *              raise IOError             # <<<<<<<<<<<<<<
 * 
 * # write to atomnetwork to .vasp file. Added at 20180827
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 433, __pyx_L1_error)

    /* "cavd/netstorage.pyx":432
 * 
 *         cdef char* c_filename = filename
 *         if not writeToMOPAC(c_filename, self.thisptr, supercell_flag):             # <<<<<<<<<<<<<<
 *              raise IOError
 * 
 */
  }

  /* "cavd/netstorage.pyx":421
 *             raise IOError
 * 
 *     def write_to_MOPAC(self, filename, supercell_flag):             # <<<<<<<<<<<<<<
 *         """
 *         Writes the atom data in AtomNetwork to a .mop file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.write_to_MOPAC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":436
 * 
 * # write to atomnetwork to .vasp file. Added at 20180827
 *     def writeAtomNetVaspFile(self, filename, storeRadius = False):             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_33writeAtomNetVaspFile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_33writeAtomNetVaspFile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_storeRadius = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeAtomNetVaspFile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_storeRadius,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_storeRadius);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeAtomNetVaspFile") < 0)) __PYX_ERR(1, 436, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_storeRadius = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeAtomNetVaspFile", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 436, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.writeAtomNetVaspFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_32writeAtomNetVaspFile(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), __pyx_v_filename, __pyx_v_storeRadius);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_32writeAtomNetVaspFile(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_storeRadius) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("writeAtomNetVaspFile", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "cavd/netstorage.pyx":437
 * # write to atomnetwork to .vasp file. Added at 20180827
 *     def writeAtomNetVaspFile(self, filename, storeRadius = False):
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 *         cdef char* c_filename = filename
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":438
 *     def writeAtomNetVaspFile(self, filename, storeRadius = False):
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *         cdef char* c_filename = filename
 *         if not writeAtmntToVasp(c_filename, self.thisptr, storeRadius):
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 438, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":437
 * # write to atomnetwork to .vasp file. Added at 20180827
 *     def writeAtomNetVaspFile(self, filename, storeRadius = False):
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 *         cdef char* c_filename = filename
 */
  }

  /* "cavd/netstorage.pyx":439
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeAtmntToVasp(c_filename, self.thisptr, storeRadius):
 *             raise IOError
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 439, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "cavd/netstorage.pyx":440
 *             filename = (<unicode>filename).encode('utf8')
 *         cdef char* c_filename = filename
 *         if not writeAtmntToVasp(c_filename, self.thisptr, storeRadius):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_storeRadius); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 440, __pyx_L1_error)
  __pyx_t_1 = ((!(writeAtmntToVasp(__pyx_v_c_filename, __pyx_v_self->thisptr, __pyx_t_2) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cavd/netstorage.pyx":441
 *         cdef char* c_filename = filename
 *         if not writeAtmntToVasp(c_filename, self.thisptr, storeRadius):
 *             raise IOError             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    __PYX_ERR(1, 441, __pyx_L1_error)

    /* "cavd/netstorage.pyx":440
 *             filename = (<unicode>filename).encode('utf8')
 *         cdef char* c_filename = filename
 *         if not writeAtmntToVasp(c_filename, self.thisptr, storeRadius):             # <<<<<<<<<<<<<<
 *             raise IOError
 * 
 */
  }

  /* "cavd/netstorage.pyx":436
 * 
 * # write to atomnetwork to .vasp file. Added at 20180827
 *     def writeAtomNetVaspFile(self, filename, storeRadius = False):             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.writeAtomNetVaspFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":444
 * 
 * 
 *     def calculate_free_sphere_parameters(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Computes the diameters of the largest included sphere, free sphere
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_35calculate_free_sphere_parameters(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_34calculate_free_sphere_parameters[] = "\n        Computes the diameters of the largest included sphere, free sphere \n        and included sphere along free sphere path. \n        Arguments:\n            filename:\n                Name of file where the diameters are stored.\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_35calculate_free_sphere_parameters(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_free_sphere_parameters (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_34calculate_free_sphere_parameters(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_34calculate_free_sphere_parameters(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  CYTHON_UNUSED PyObject *__pyx_v_sucess = NULL;
  PyObject *__pyx_v_vornet = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_edge_centers = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_face_centers = NULL;
  char *__pyx_v_c_fname;
  VORONOI_NETWORK *__pyx_v_vornet_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  char *__pyx_t_10;
  VORONOI_NETWORK *__pyx_t_11;
  __Pyx_RefNannySetupContext("calculate_free_sphere_parameters", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "cavd/netstorage.pyx":452
 *                 Name of file where the diameters are stored.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":453
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         sucess, vornet, edge_centers, face_centers = self.perform_voronoi_decomposition(False)
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 453, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":452
 *                 Name of file where the diameters are stored.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":455
 *             filename = (<unicode>filename).encode('utf8')
 * 
 *         sucess, vornet, edge_centers, face_centers = self.perform_voronoi_decomposition(False)             # <<<<<<<<<<<<<<
 *         cdef char* c_fname = filename
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_perform_voronoi_decomposition); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, Py_False) : __Pyx_PyObject_CallOneArg(__pyx_t_4, Py_False);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 455, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(1, 455, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 4) < 0) __PYX_ERR(1, 455, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 455, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_sucess = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_vornet = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_edge_centers = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_face_centers = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "cavd/netstorage.pyx":456
 * 
 *         sucess, vornet, edge_centers, face_centers = self.perform_voronoi_decomposition(False)
 *         cdef char* c_fname = filename             # <<<<<<<<<<<<<<
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, True)
 */
  __pyx_t_10 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(1, 456, __pyx_L1_error)
  __pyx_v_c_fname = __pyx_t_10;

  /* "cavd/netstorage.pyx":457
 *         sucess, vornet, edge_centers, face_centers = self.perform_voronoi_decomposition(False)
 *         cdef char* c_fname = filename
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, True)
 * 		#:q:q(vornet_ptr, c_fname, False)
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_ptype_4cavd_10netstorage_VoronoiNetwork)))) __PYX_ERR(1, 457, __pyx_L1_error)
  __pyx_t_11 = ((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_vornet_ptr = __pyx_t_11;

  /* "cavd/netstorage.pyx":458
 *         cdef char* c_fname = filename
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *         calculateFreeSphereParameters(vornet_ptr, c_fname, True)             # <<<<<<<<<<<<<<
 * 		#:q:q(vornet_ptr, c_fname, False)
 * 
 */
  calculateFreeSphereParameters(__pyx_v_vornet_ptr, __pyx_v_c_fname, 1);

  /* "cavd/netstorage.pyx":444
 * 
 * 
 *     def calculate_free_sphere_parameters(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Computes the diameters of the largest included sphere, free sphere
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.calculate_free_sphere_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sucess);
  __Pyx_XDECREF(__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_edge_centers);
  __Pyx_XDECREF(__pyx_v_face_centers);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":462
 * 
 *       #Added at 20180420
 *     def through_VorNet(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Computes the diameters of the largest included sphere, free sphere
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_37through_VorNet(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_36through_VorNet[] = "\n        Computes the diameters of the largest included sphere, free sphere \n        and included sphere along free sphere path. \n        Arguments:\n        filename:\n            Name of file where the diameters are stored.\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_37through_VorNet(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("through_VorNet (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_36through_VorNet(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_36through_VorNet(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_vornet = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_edge_centers = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_face_centers = NULL;
  char *__pyx_v_c_fname;
  double __pyx_v_c_Ri;
  double __pyx_v_c_Rf;
  double __pyx_v_c_Rif;
  VORONOI_NETWORK *__pyx_v_vornet_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  char *__pyx_t_9;
  VORONOI_NETWORK *__pyx_t_10;
  __Pyx_RefNannySetupContext("through_VorNet", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "cavd/netstorage.pyx":470
 *             Name of file where the diameters are stored.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 *         #if isinstance(migrantRad, unicode):
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":471
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *         #if isinstance(migrantRad, unicode):
 *         #    migrantRad = (<unicode>migrantRad).encode('utf8')
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 471, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":470
 *             Name of file where the diameters are stored.
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 *         #if isinstance(migrantRad, unicode):
 */
  }

  /* "cavd/netstorage.pyx":475
 *         #    migrantRad = (<unicode>migrantRad).encode('utf8')
 * 
 *         vornet, edge_centers, face_centers = self.perform_voronoi_decomposition(False)             # <<<<<<<<<<<<<<
 *         cdef char* c_fname = filename
 *         #cdef double c_migrantRad = migrantRad
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_perform_voronoi_decomposition); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, Py_False) : __Pyx_PyObject_CallOneArg(__pyx_t_4, Py_False);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 475, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 2; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_6);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 3) < 0) __PYX_ERR(1, 475, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 475, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_vornet = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_edge_centers = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_face_centers = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "cavd/netstorage.pyx":476
 * 
 *         vornet, edge_centers, face_centers = self.perform_voronoi_decomposition(False)
 *         cdef char* c_fname = filename             # <<<<<<<<<<<<<<
 *         #cdef double c_migrantRad = migrantRad
 *         #Added at 20180530
 */
  __pyx_t_9 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 476, __pyx_L1_error)
  __pyx_v_c_fname = __pyx_t_9;

  /* "cavd/netstorage.pyx":483
 *         cdef double* c_Rif_ptr
 *         cdef double c_Ri,c_Rf,c_Rif
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *         if throughVorNet(vornet_ptr, c_fname, &c_Ri, &c_Rf, &c_Rif):
 *             #return True
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_ptype_4cavd_10netstorage_VoronoiNetwork)))) __PYX_ERR(1, 483, __pyx_L1_error)
  __pyx_t_10 = ((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_vornet_ptr = __pyx_t_10;

  /* "cavd/netstorage.pyx":484
 *         cdef double c_Ri,c_Rf,c_Rif
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *         if throughVorNet(vornet_ptr, c_fname, &c_Ri, &c_Rf, &c_Rif):             # <<<<<<<<<<<<<<
 *             #return True
 *             #edited at 20180530
 */
  __pyx_t_2 = (throughVorNet(__pyx_v_vornet_ptr, __pyx_v_c_fname, (&__pyx_v_c_Ri), (&__pyx_v_c_Rf), (&__pyx_v_c_Rif)) != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":487
 *             #return True
 *             #edited at 20180530
 *             return c_Ri,c_Rf,c_Rif             # <<<<<<<<<<<<<<
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_c_Ri); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_c_Rf); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_c_Rif); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "cavd/netstorage.pyx":484
 *         cdef double c_Ri,c_Rf,c_Rif
 *         vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *         if throughVorNet(vornet_ptr, c_fname, &c_Ri, &c_Rf, &c_Rif):             # <<<<<<<<<<<<<<
 *             #return True
 *             #edited at 20180530
 */
  }

  /* "cavd/netstorage.pyx":462
 * 
 *       #Added at 20180420
 *     def through_VorNet(self, filename):             # <<<<<<<<<<<<<<
 *         """
 *         Computes the diameters of the largest included sphere, free sphere
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.through_VorNet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_edge_centers);
  __Pyx_XDECREF(__pyx_v_face_centers);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":489
 *             return c_Ri,c_Rf,c_Rif
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_39perform_voronoi_decomposition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cavd_10netstorage_11AtomNetwork_38perform_voronoi_decomposition[] = "\n        Performs weighted voronoi decomposition of atoms in the AtomNetwork \n        to analyze void space and generate voronoi nodes, edges and faces.\n        Arguments:\n            saveVorCells (optional): \n                Flag to denote whether to save the VorCells.\n                Reserved for future use, so ignore this.\n        Returns:\n            Instance of VoronoiNetwork\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_39perform_voronoi_decomposition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_saveVorCells = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("perform_voronoi_decomposition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_saveVorCells,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_saveVorCells);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "perform_voronoi_decomposition") < 0)) __PYX_ERR(1, 489, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_saveVorCells = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("perform_voronoi_decomposition", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 489, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.perform_voronoi_decomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_38perform_voronoi_decomposition(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), __pyx_v_saveVorCells);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4cavd_10netstorage_11AtomNetwork_29perform_voronoi_decomposition_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cavd/netstorage.pyx":527
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)             # <<<<<<<<<<<<<<
 *             if edge_center not in edge_centers:
 *                 edge_centers.append(edge_center)
 */

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_29perform_voronoi_decomposition_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr *)__pyx_tp_new_4cavd_10netstorage___pyx_scope_struct_1_genexpr(__pyx_ptype_4cavd_10netstorage___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 527, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4cavd_10netstorage_11AtomNetwork_29perform_voronoi_decomposition_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_perform_voronoi_decomposition_lo, __pyx_n_s_cavd_netstorage); if (unlikely(!gen)) __PYX_ERR(1, 527, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.perform_voronoi_decomposition.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4cavd_10netstorage_11AtomNetwork_29perform_voronoi_decomposition_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 527, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_edge_center)) { __Pyx_RaiseClosureNameError("edge_center"); __PYX_ERR(1, 527, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_edge_center)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_edge_center)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_edge_center; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_edge_center); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 527, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 527, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 527, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 527, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 527, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 527, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_cur_scope->__pyx_v_x, __pyx_int_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 527, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":489
 *             return c_Ri,c_Rf,c_Rif
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_38perform_voronoi_decomposition(struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, PyObject *__pyx_v_saveVorCells) {
  struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition *__pyx_cur_scope;
  struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_vornet = NULL;
  std::vector<VOR_CELL>  __pyx_v_vcells;
  std::vector<BASIC_VCELL>  __pyx_v_bvcells;
  PyObject *__pyx_v_edge_centers = NULL;
  std::vector<VOR_EDGE>  __pyx_v_vedges;
  std::vector<VOR_NODE>  __pyx_v_vnodes;
  std::vector<VOR_EDGE> ::size_type __pyx_v_i;
  int __pyx_v_edge_orig;
  int __pyx_v_edge_end;
  VOR_NODE __pyx_v_o_vnode;
  VOR_NODE __pyx_v_e_vnode;
  PyObject *__pyx_v_face_centers = NULL;
  std::vector<VOR_FACE>  __pyx_v_vfaces;
  std::vector<Point>  __pyx_v_vertices;
  CYTHON_UNUSED Point *__pyx_v_cpoint_ptr;
  std::vector<int>  __pyx_v_node_ids;
  PyObject *__pyx_v_face_node_ids = NULL;
  std::vector<VOR_FACE> ::size_type __pyx_v_j;
  PyObject *__pyx_v_node_id_list = NULL;
  std::vector<int> ::size_type __pyx_v_k;
  PyObject *__pyx_v_node_id_set = NULL;
  struct __pyx_obj_4cavd_8geometry_Point *__pyx_v_centroid = NULL;
  PyObject *__pyx_v_fcs = NULL;
  PyObject *__pyx_v_center = NULL;
  PyObject *__pyx_v_cntr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  std::vector<VOR_EDGE>  __pyx_t_4;
  std::vector<VOR_NODE>  __pyx_t_5;
  std::vector<VOR_EDGE> ::size_type __pyx_t_6;
  std::vector<VOR_EDGE> ::size_type __pyx_t_7;
  std::vector<VOR_EDGE> ::size_type __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  std::vector<VOR_CELL> ::size_type __pyx_t_14;
  std::vector<VOR_CELL> ::size_type __pyx_t_15;
  std::vector<VOR_FACE>  __pyx_t_16;
  std::vector<VOR_FACE> ::size_type __pyx_t_17;
  std::vector<VOR_FACE> ::size_type __pyx_t_18;
  std::vector<VOR_FACE> ::size_type __pyx_t_19;
  std::vector<int>  __pyx_t_20;
  std::vector<int> ::size_type __pyx_t_21;
  std::vector<int> ::size_type __pyx_t_22;
  std::vector<int> ::size_type __pyx_t_23;
  Point *__pyx_t_24;
  std::vector<Point>  __pyx_t_25;
  std::vector<Point> ::size_type __pyx_t_26;
  std::vector<Point> ::size_type __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  PyObject *__pyx_t_29 = NULL;
  __Pyx_RefNannySetupContext("perform_voronoi_decomposition", 0);
  __pyx_cur_scope = (struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition *)__pyx_tp_new_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition(__pyx_ptype_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 489, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "cavd/netstorage.pyx":501
 *         """
 *         #Calls Zeo++ performVoronoiDecomp function defined in network.cc.
 *         vornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_CELL] vcells
 *         cdef vector[BASIC_VCELL] bvcells
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cavd_10netstorage_VoronoiNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_vornet = ((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cavd/netstorage.pyx":506
 *         #print self.rad_flag
 *         if not performVoronoiDecomp(self.rad_flag, self.thisptr,
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):             # <<<<<<<<<<<<<<
 *             #edited at 20180604
 *             #Add a compute flag
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_saveVorCells); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 506, __pyx_L1_error)

  /* "cavd/netstorage.pyx":505
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print self.rad_flag
 *         if not performVoronoiDecomp(self.rad_flag, self.thisptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             #edited at 20180604
 */
  __pyx_t_3 = ((!(performVoronoiDecomp(__pyx_v_self->rad_flag, __pyx_v_self->thisptr, __pyx_v_vornet->thisptr, (&__pyx_v_vcells), __pyx_t_2, (&__pyx_v_bvcells)) != 0)) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "cavd/netstorage.pyx":510
 *             #Add a compute flag
 *             #success = False
 *             raise PerformVDError             # <<<<<<<<<<<<<<
 *         #else:
 *             #success = True
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PerformVDError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 510, __pyx_L1_error)

    /* "cavd/netstorage.pyx":505
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print self.rad_flag
 *         if not performVoronoiDecomp(self.rad_flag, self.thisptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             #edited at 20180604
 */
  }

  /* "cavd/netstorage.pyx":516
 * 
 *         # Get the edge centers
 *         edge_centers = []             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_EDGE] vedges = vornet.thisptr.edges
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_edge_centers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cavd/netstorage.pyx":517
 *         # Get the edge centers
 *         edge_centers = []
 *         cdef vector[VOR_EDGE] vedges = vornet.thisptr.edges             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes
 *         for i in range(vedges.size()):
 */
  __pyx_t_4 = __pyx_v_vornet->thisptr->edges;
  __pyx_v_vedges = __pyx_t_4;

  /* "cavd/netstorage.pyx":518
 *         edge_centers = []
 *         cdef vector[VOR_EDGE] vedges = vornet.thisptr.edges
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes             # <<<<<<<<<<<<<<
 *         for i in range(vedges.size()):
 *             edge_orig =  vedges[i].origin
 */
  __pyx_t_5 = __pyx_v_vornet->thisptr->nodes;
  __pyx_v_vnodes = __pyx_t_5;

  /* "cavd/netstorage.pyx":519
 *         cdef vector[VOR_EDGE] vedges = vornet.thisptr.edges
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes
 *         for i in range(vedges.size()):             # <<<<<<<<<<<<<<
 *             edge_orig =  vedges[i].origin
 *             edge_end =  vedges[i].ending
 */
  __pyx_t_6 = __pyx_v_vedges.size();
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "cavd/netstorage.pyx":520
 *         cdef vector[VOR_NODE] vnodes = vornet.thisptr.nodes
 *         for i in range(vedges.size()):
 *             edge_orig =  vedges[i].origin             # <<<<<<<<<<<<<<
 *             edge_end =  vedges[i].ending
 *             o_vnode = vnodes[edge_orig]
 */
    __pyx_t_9 = (__pyx_v_vedges[__pyx_v_i]).from;
    __pyx_v_edge_orig = __pyx_t_9;

    /* "cavd/netstorage.pyx":521
 *         for i in range(vedges.size()):
 *             edge_orig =  vedges[i].origin
 *             edge_end =  vedges[i].ending             # <<<<<<<<<<<<<<
 *             o_vnode = vnodes[edge_orig]
 *             e_vnode = vnodes[edge_end]
 */
    __pyx_t_9 = (__pyx_v_vedges[__pyx_v_i]).to;
    __pyx_v_edge_end = __pyx_t_9;

    /* "cavd/netstorage.pyx":522
 *             edge_orig =  vedges[i].origin
 *             edge_end =  vedges[i].ending
 *             o_vnode = vnodes[edge_orig]             # <<<<<<<<<<<<<<
 *             e_vnode = vnodes[edge_end]
 *             edge_center = (o_vnode.x + e_vnode.x, \
 */
    __pyx_v_o_vnode = (__pyx_v_vnodes[__pyx_v_edge_orig]);

    /* "cavd/netstorage.pyx":523
 *             edge_end =  vedges[i].ending
 *             o_vnode = vnodes[edge_orig]
 *             e_vnode = vnodes[edge_end]             # <<<<<<<<<<<<<<
 *             edge_center = (o_vnode.x + e_vnode.x, \
 *                            o_vnode.y + e_vnode.y, \
 */
    __pyx_v_e_vnode = (__pyx_v_vnodes[__pyx_v_edge_end]);

    /* "cavd/netstorage.pyx":524
 *             o_vnode = vnodes[edge_orig]
 *             e_vnode = vnodes[edge_end]
 *             edge_center = (o_vnode.x + e_vnode.x, \             # <<<<<<<<<<<<<<
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_o_vnode.x + __pyx_v_e_vnode.x)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "cavd/netstorage.pyx":525
 *             e_vnode = vnodes[edge_end]
 *             edge_center = (o_vnode.x + e_vnode.x, \
 *                            o_vnode.y + e_vnode.y, \             # <<<<<<<<<<<<<<
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)
 */
    __pyx_t_10 = PyFloat_FromDouble((__pyx_v_o_vnode.y + __pyx_v_e_vnode.y)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);

    /* "cavd/netstorage.pyx":526
 *             edge_center = (o_vnode.x + e_vnode.x, \
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)             # <<<<<<<<<<<<<<
 *             edge_center = tuple(x/2 for x in edge_center)
 *             if edge_center not in edge_centers:
 */
    __pyx_t_11 = PyFloat_FromDouble((__pyx_v_o_vnode.z + __pyx_v_e_vnode.z)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);

    /* "cavd/netstorage.pyx":524
 *             o_vnode = vnodes[edge_orig]
 *             e_vnode = vnodes[edge_end]
 *             edge_center = (o_vnode.x + e_vnode.x, \             # <<<<<<<<<<<<<<
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
 */
    __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_11);
    __pyx_t_1 = 0;
    __pyx_t_10 = 0;
    __pyx_t_11 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_edge_center);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_edge_center, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_12);
    __pyx_t_12 = 0;

    /* "cavd/netstorage.pyx":527
 *                            o_vnode.y + e_vnode.y, \
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)             # <<<<<<<<<<<<<<
 *             if edge_center not in edge_centers:
 *                 edge_centers.append(edge_center)
 */
    __pyx_t_12 = __pyx_pf_4cavd_10netstorage_11AtomNetwork_29perform_voronoi_decomposition_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_11 = __Pyx_PySequence_Tuple(__pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_edge_center);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_edge_center, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    __pyx_t_11 = 0;

    /* "cavd/netstorage.pyx":528
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)
 *             if edge_center not in edge_centers:             # <<<<<<<<<<<<<<
 *                 edge_centers.append(edge_center)
 * 
 */
    __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_edge_center, __pyx_v_edge_centers, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 528, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "cavd/netstorage.pyx":529
 *             edge_center = tuple(x/2 for x in edge_center)
 *             if edge_center not in edge_centers:
 *                 edge_centers.append(edge_center)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_11 = __pyx_cur_scope->__pyx_v_edge_center;
      __Pyx_INCREF(__pyx_t_11);
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_edge_centers, __pyx_t_11); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(1, 529, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "cavd/netstorage.pyx":528
 *                            o_vnode.z + e_vnode.z)
 *             edge_center = tuple(x/2 for x in edge_center)
 *             if edge_center not in edge_centers:             # <<<<<<<<<<<<<<
 *                 edge_centers.append(edge_center)
 * 
 */
    }
  }

  /* "cavd/netstorage.pyx":534
 * 
 *         # Get the vorcells and obtain the face centers
 *         face_centers = []             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_FACE] vfaces
 *         cdef vector[CPoint] vertices
 */
  __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_v_face_centers = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "cavd/netstorage.pyx":540
 *         #cdef map[int, int] id_maps
 *         cdef vector[int] node_ids
 *         face_node_ids = set()             # <<<<<<<<<<<<<<
 *         for i in range(vcells.size()):
 *             vfaces = vcells[i].faces
 */
  __pyx_t_11 = PySet_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_v_face_node_ids = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "cavd/netstorage.pyx":541
 *         cdef vector[int] node_ids
 *         face_node_ids = set()
 *         for i in range(vcells.size()):             # <<<<<<<<<<<<<<
 *             vfaces = vcells[i].faces
 *             for j in range(vfaces.size()):
 */
  __pyx_t_14 = __pyx_v_vcells.size();
  __pyx_t_15 = __pyx_t_14;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_15; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "cavd/netstorage.pyx":542
 *         face_node_ids = set()
 *         for i in range(vcells.size()):
 *             vfaces = vcells[i].faces             # <<<<<<<<<<<<<<
 *             for j in range(vfaces.size()):
 *                 node_ids = vfaces[j].node_ids
 */
    __pyx_t_16 = (__pyx_v_vcells[__pyx_v_i]).faces;
    __pyx_v_vfaces = __pyx_t_16;

    /* "cavd/netstorage.pyx":543
 *         for i in range(vcells.size()):
 *             vfaces = vcells[i].faces
 *             for j in range(vfaces.size()):             # <<<<<<<<<<<<<<
 *                 node_ids = vfaces[j].node_ids
 *                 node_id_list = []
 */
    __pyx_t_17 = __pyx_v_vfaces.size();
    __pyx_t_18 = __pyx_t_17;
    for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
      __pyx_v_j = __pyx_t_19;

      /* "cavd/netstorage.pyx":544
 *             vfaces = vcells[i].faces
 *             for j in range(vfaces.size()):
 *                 node_ids = vfaces[j].node_ids             # <<<<<<<<<<<<<<
 *                 node_id_list = []
 *                 for k in range(node_ids.size()):
 */
      __pyx_t_20 = (__pyx_v_vfaces[__pyx_v_j]).nodeIDs;
      __pyx_v_node_ids = __pyx_t_20;

      /* "cavd/netstorage.pyx":545
 *             for j in range(vfaces.size()):
 *                 node_ids = vfaces[j].node_ids
 *                 node_id_list = []             # <<<<<<<<<<<<<<
 *                 for k in range(node_ids.size()):
 *                     node_id_list.append(node_ids[k])
 */
      __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_XDECREF_SET(__pyx_v_node_id_list, ((PyObject*)__pyx_t_11));
      __pyx_t_11 = 0;

      /* "cavd/netstorage.pyx":546
 *                 node_ids = vfaces[j].node_ids
 *                 node_id_list = []
 *                 for k in range(node_ids.size()):             # <<<<<<<<<<<<<<
 *                     node_id_list.append(node_ids[k])
 *                 node_id_set = frozenset(node_id_list)
 */
      __pyx_t_21 = __pyx_v_node_ids.size();
      __pyx_t_22 = __pyx_t_21;
      for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
        __pyx_v_k = __pyx_t_23;

        /* "cavd/netstorage.pyx":547
 *                 node_id_list = []
 *                 for k in range(node_ids.size()):
 *                     node_id_list.append(node_ids[k])             # <<<<<<<<<<<<<<
 *                 node_id_set = frozenset(node_id_list)
 *                 if not node_id_set in face_node_ids:
 */
        __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_v_node_ids[__pyx_v_k])); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 547, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_node_id_list, __pyx_t_11); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(1, 547, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }

      /* "cavd/netstorage.pyx":548
 *                 for k in range(node_ids.size()):
 *                     node_id_list.append(node_ids[k])
 *                 node_id_set = frozenset(node_id_list)             # <<<<<<<<<<<<<<
 *                 if not node_id_set in face_node_ids:
 *                     face_node_ids.add(node_id_set)
 */
      __pyx_t_11 = __Pyx_PyFrozenSet_New(__pyx_v_node_id_list); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_XDECREF_SET(__pyx_v_node_id_set, ((PyObject*)__pyx_t_11));
      __pyx_t_11 = 0;

      /* "cavd/netstorage.pyx":549
 *                     node_id_list.append(node_ids[k])
 *                 node_id_set = frozenset(node_id_list)
 *                 if not node_id_set in face_node_ids:             # <<<<<<<<<<<<<<
 *                     face_node_ids.add(node_id_set)
 *                     centroid = Point()
 */
      __pyx_t_2 = (__Pyx_PySet_ContainsTF(__pyx_v_node_id_set, __pyx_v_face_node_ids, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 549, __pyx_L1_error)
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {

        /* "cavd/netstorage.pyx":550
 *                 node_id_set = frozenset(node_id_list)
 *                 if not node_id_set in face_node_ids:
 *                     face_node_ids.add(node_id_set)             # <<<<<<<<<<<<<<
 *                     centroid = Point()
 *                     cpoint_ptr = (<Point?>centroid).thisptr
 */
        __pyx_t_13 = PySet_Add(__pyx_v_face_node_ids, __pyx_v_node_id_set); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(1, 550, __pyx_L1_error)

        /* "cavd/netstorage.pyx":551
 *                 if not node_id_set in face_node_ids:
 *                     face_node_ids.add(node_id_set)
 *                     centroid = Point()             # <<<<<<<<<<<<<<
 *                     cpoint_ptr = (<Point?>centroid).thisptr
 *                     vertices = vfaces[j].vertices
 */
        __pyx_t_11 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cavd_8geometry_Point)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 551, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_XDECREF_SET(__pyx_v_centroid, ((struct __pyx_obj_4cavd_8geometry_Point *)__pyx_t_11));
        __pyx_t_11 = 0;

        /* "cavd/netstorage.pyx":552
 *                     face_node_ids.add(node_id_set)
 *                     centroid = Point()
 *                     cpoint_ptr = (<Point?>centroid).thisptr             # <<<<<<<<<<<<<<
 *                     vertices = vfaces[j].vertices
 *                     for k in range(vertices.size()):
 */
        if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_centroid), __pyx_ptype_4cavd_8geometry_Point)))) __PYX_ERR(1, 552, __pyx_L1_error)
        __pyx_t_24 = __pyx_v_centroid->thisptr;
        __pyx_v_cpoint_ptr = __pyx_t_24;

        /* "cavd/netstorage.pyx":553
 *                     centroid = Point()
 *                     cpoint_ptr = (<Point?>centroid).thisptr
 *                     vertices = vfaces[j].vertices             # <<<<<<<<<<<<<<
 *                     for k in range(vertices.size()):
 *                         centroid.x = centroid.x + vertices[k].vals[0]
 */
        __pyx_t_25 = (__pyx_v_vfaces[__pyx_v_j]).orderedVertices;
        __pyx_v_vertices = __pyx_t_25;

        /* "cavd/netstorage.pyx":554
 *                     cpoint_ptr = (<Point?>centroid).thisptr
 *                     vertices = vfaces[j].vertices
 *                     for k in range(vertices.size()):             # <<<<<<<<<<<<<<
 *                         centroid.x = centroid.x + vertices[k].vals[0]
 *                         centroid.y = centroid.y + vertices[k].vals[1]
 */
        __pyx_t_26 = __pyx_v_vertices.size();
        __pyx_t_27 = __pyx_t_26;
        for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_27; __pyx_t_21+=1) {
          __pyx_v_k = __pyx_t_21;

          /* "cavd/netstorage.pyx":555
 *                     vertices = vfaces[j].vertices
 *                     for k in range(vertices.size()):
 *                         centroid.x = centroid.x + vertices[k].vals[0]             # <<<<<<<<<<<<<<
 *                         centroid.y = centroid.y + vertices[k].vals[1]
 *                         centroid.z = centroid.z + vertices[k].vals[2]
 */
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_x); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 555, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_vertices[__pyx_v_k]).vals[0])); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 555, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_10 = PyNumber_Add(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 555, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_x, __pyx_t_10) < 0) __PYX_ERR(1, 555, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "cavd/netstorage.pyx":556
 *                     for k in range(vertices.size()):
 *                         centroid.x = centroid.x + vertices[k].vals[0]
 *                         centroid.y = centroid.y + vertices[k].vals[1]             # <<<<<<<<<<<<<<
 *                         centroid.z = centroid.z + vertices[k].vals[2]
 *                     centroid.x = centroid.x/vertices.size()
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_y); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 556, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_vertices[__pyx_v_k]).vals[1])); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 556, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_11 = PyNumber_Add(__pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 556, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_y, __pyx_t_11) < 0) __PYX_ERR(1, 556, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "cavd/netstorage.pyx":557
 *                         centroid.x = centroid.x + vertices[k].vals[0]
 *                         centroid.y = centroid.y + vertices[k].vals[1]
 *                         centroid.z = centroid.z + vertices[k].vals[2]             # <<<<<<<<<<<<<<
 *                     centroid.x = centroid.x/vertices.size()
 *                     centroid.y = centroid.y/vertices.size()
 */
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_z); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 557, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyFloat_FromDouble(((__pyx_v_vertices[__pyx_v_k]).vals[2])); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 557, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_10 = PyNumber_Add(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 557, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_z, __pyx_t_10) < 0) __PYX_ERR(1, 557, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }

        /* "cavd/netstorage.pyx":558
 *                         centroid.y = centroid.y + vertices[k].vals[1]
 *                         centroid.z = centroid.z + vertices[k].vals[2]
 *                     centroid.x = centroid.x/vertices.size()             # <<<<<<<<<<<<<<
 *                     centroid.y = centroid.y/vertices.size()
 *                     centroid.z = centroid.z/vertices.size()
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_x); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 558, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_12 = __Pyx_PyInt_FromSize_t(__pyx_v_vertices.size()); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 558, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 558, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_x, __pyx_t_11) < 0) __PYX_ERR(1, 558, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "cavd/netstorage.pyx":559
 *                         centroid.z = centroid.z + vertices[k].vals[2]
 *                     centroid.x = centroid.x/vertices.size()
 *                     centroid.y = centroid.y/vertices.size()             # <<<<<<<<<<<<<<
 *                     centroid.z = centroid.z/vertices.size()
 *                     face_centers.append(centroid)
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_y); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 559, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyInt_FromSize_t(__pyx_v_vertices.size()); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 559, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 559, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_y, __pyx_t_10) < 0) __PYX_ERR(1, 559, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "cavd/netstorage.pyx":560
 *                     centroid.x = centroid.x/vertices.size()
 *                     centroid.y = centroid.y/vertices.size()
 *                     centroid.z = centroid.z/vertices.size()             # <<<<<<<<<<<<<<
 *                     face_centers.append(centroid)
 * 
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_z); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 560, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_12 = __Pyx_PyInt_FromSize_t(__pyx_v_vertices.size()); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 560, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 560, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_centroid), __pyx_n_s_z, __pyx_t_11) < 0) __PYX_ERR(1, 560, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "cavd/netstorage.pyx":561
 *                     centroid.y = centroid.y/vertices.size()
 *                     centroid.z = centroid.z/vertices.size()
 *                     face_centers.append(centroid)             # <<<<<<<<<<<<<<
 * 
 *         # Convert the Zeo++ Point objects in (x,y,z) tuple objects
 */
        __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_face_centers, ((PyObject *)__pyx_v_centroid)); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(1, 561, __pyx_L1_error)

        /* "cavd/netstorage.pyx":549
 *                     node_id_list.append(node_ids[k])
 *                 node_id_set = frozenset(node_id_list)
 *                 if not node_id_set in face_node_ids:             # <<<<<<<<<<<<<<
 *                     face_node_ids.add(node_id_set)
 *                     centroid = Point()
 */
      }
    }
  }

  /* "cavd/netstorage.pyx":564
 * 
 *         # Convert the Zeo++ Point objects in (x,y,z) tuple objects
 *         fcs = []             # <<<<<<<<<<<<<<
 *         for center in face_centers:
 *             cntr = (center.x,center.y,center.z)
 */
  __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_v_fcs = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "cavd/netstorage.pyx":565
 *         # Convert the Zeo++ Point objects in (x,y,z) tuple objects
 *         fcs = []
 *         for center in face_centers:             # <<<<<<<<<<<<<<
 *             cntr = (center.x,center.y,center.z)
 *             fcs.append(cntr)
 */
  __pyx_t_11 = __pyx_v_face_centers; __Pyx_INCREF(__pyx_t_11); __pyx_t_28 = 0;
  for (;;) {
    if (__pyx_t_28 >= PyList_GET_SIZE(__pyx_t_11)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_12 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_28); __Pyx_INCREF(__pyx_t_12); __pyx_t_28++; if (unlikely(0 < 0)) __PYX_ERR(1, 565, __pyx_L1_error)
    #else
    __pyx_t_12 = PySequence_ITEM(__pyx_t_11, __pyx_t_28); __pyx_t_28++; if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_center, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "cavd/netstorage.pyx":566
 *         fcs = []
 *         for center in face_centers:
 *             cntr = (center.x,center.y,center.z)             # <<<<<<<<<<<<<<
 *             fcs.append(cntr)
 * 
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_center, __pyx_n_s_x); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_center, __pyx_n_s_y); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_center, __pyx_n_s_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_29 = PyTuple_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_29, 2, __pyx_t_1);
    __pyx_t_12 = 0;
    __pyx_t_10 = 0;
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_cntr, ((PyObject*)__pyx_t_29));
    __pyx_t_29 = 0;

    /* "cavd/netstorage.pyx":567
 *         for center in face_centers:
 *             cntr = (center.x,center.y,center.z)
 *             fcs.append(cntr)             # <<<<<<<<<<<<<<
 * 
 *         #bvcelllist = []
 */
    __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_fcs, __pyx_v_cntr); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(1, 567, __pyx_L1_error)

    /* "cavd/netstorage.pyx":565
 *         # Convert the Zeo++ Point objects in (x,y,z) tuple objects
 *         fcs = []
 *         for center in face_centers:             # <<<<<<<<<<<<<<
 *             cntr = (center.x,center.y,center.z)
 *             fcs.append(cntr)
 */
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "cavd/netstorage.pyx":581
 *             #basicvcell.thisptr = &(bvcells[i])
 *             #bvcelllist.append(bvcells[i])
 *         return vornet, edge_centers, fcs             # <<<<<<<<<<<<<<
 * 
 * cdef class VoronoiNode:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(((PyObject *)__pyx_v_vornet));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_vornet));
  PyTuple_SET_ITEM(__pyx_t_11, 0, ((PyObject *)__pyx_v_vornet));
  __Pyx_INCREF(__pyx_v_edge_centers);
  __Pyx_GIVEREF(__pyx_v_edge_centers);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_edge_centers);
  __Pyx_INCREF(__pyx_v_fcs);
  __Pyx_GIVEREF(__pyx_v_fcs);
  PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_v_fcs);
  __pyx_r = __pyx_t_11;
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":489
 *             return c_Ri,c_Rf,c_Rif
 * 
 *     def perform_voronoi_decomposition(self, saveVorCells=True):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.perform_voronoi_decomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vornet);
  __Pyx_XDECREF(__pyx_v_edge_centers);
  __Pyx_XDECREF(__pyx_v_face_centers);
  __Pyx_XDECREF(__pyx_v_face_node_ids);
  __Pyx_XDECREF(__pyx_v_node_id_list);
  __Pyx_XDECREF(__pyx_v_node_id_set);
  __Pyx_XDECREF((PyObject *)__pyx_v_centroid);
  __Pyx_XDECREF(__pyx_v_fcs);
  __Pyx_XDECREF(__pyx_v_center);
  __Pyx_XDECREF(__pyx_v_cntr);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_40__reduce_cython__(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_40__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11AtomNetwork_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11AtomNetwork_42__setstate_cython__(((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11AtomNetwork_42__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.AtomNetwork.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":587
 *     Class to store the voronoi nodes with coordinates and radius
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VOR_NODE()
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11VoronoiNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11VoronoiNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiNode___cinit__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11VoronoiNode___cinit__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  VOR_NODE *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cavd/netstorage.pyx":588
 *     """
 *     def __cinit__(self):
 *         self.thisptr = new VOR_NODE()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  try {
    __pyx_t_1 = new VOR_NODE();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 588, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "cavd/netstorage.pyx":587
 *     Class to store the voronoi nodes with coordinates and radius
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VOR_NODE()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNode.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":590
 *         self.thisptr = new VOR_NODE()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11VoronoiNode_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11VoronoiNode_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiNode_2__init__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11VoronoiNode_2__init__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":593
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_4cavd_10netstorage_11VoronoiNode_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cavd_10netstorage_11VoronoiNode_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4cavd_10netstorage_11VoronoiNode_4__dealloc__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cavd_10netstorage_11VoronoiNode_4__dealloc__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cavd/netstorage.pyx":594
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property coords:
 */
  delete __pyx_v_self->thisptr;

  /* "cavd/netstorage.pyx":593
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cavd/netstorage.pyx":597
 * 
 *     property coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = [self.thisptr.x, self.thisptr.y, self.thisptr.z]
 *             return coords
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiNode_6coords_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiNode_6coords_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiNode_6coords___get__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiNode_6coords___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self) {
  PyObject *__pyx_v_coords = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cavd/netstorage.pyx":598
 *     property coords:
 *         def __get__(self):
 *             coords = [self.thisptr.x, self.thisptr.y, self.thisptr.z]             # <<<<<<<<<<<<<<
 *             return coords
 *         def __set__(self, coords):      # Don't set this
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_coords = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cavd/netstorage.pyx":599
 *         def __get__(self):
 *             coords = [self.thisptr.x, self.thisptr.y, self.thisptr.z]
 *             return coords             # <<<<<<<<<<<<<<
 *         def __set__(self, coords):      # Don't set this
 *             """
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_coords);
  __pyx_r = __pyx_v_coords;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":597
 * 
 *     property coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             coords = [self.thisptr.x, self.thisptr.y, self.thisptr.z]
 *             return coords
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNode.coords.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coords);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":600
 *             coords = [self.thisptr.x, self.thisptr.y, self.thisptr.z]
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11VoronoiNode_6coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11VoronoiNode_6coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiNode_6coords_2__set__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNode *)__pyx_v_self), ((PyObject *)__pyx_v_coords));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11VoronoiNode_6coords_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":604
 *             This variable is not supposed to be modified manually
 *             """
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 604, __pyx_L1_error)

  /* "cavd/netstorage.pyx":605
 *             """
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.x = coords[0]             # <<<<<<<<<<<<<<
 *             self.thisptr.y = coords[1]
 *             self.thisptr.z = coords[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->x = __pyx_t_2;

  /* "cavd/netstorage.pyx":606
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]             # <<<<<<<<<<<<<<
 *             self.thisptr.z = coords[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->y = __pyx_t_2;

  /* "cavd/netstorage.pyx":607
 *             self.thisptr.x = coords[0]
 *             self.thisptr.y = coords[1]
 *             self.thisptr.z = coords[2]             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->z = __pyx_t_2;

  /* "cavd/netstorage.pyx":600
 *             coords = [self.thisptr.x, self.thisptr.y, self.thisptr.z]
 *             return coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNode.coords.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":610
 * 
 *     property label:
 *         def __get__(self): return self.thisptr.label             # <<<<<<<<<<<<<<
 *         def __set__(self, label):
 *             self.thisptr.label = label
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiNode_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiNode_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiNode_5label___get__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiNode_5label___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->label); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNode.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":611
 *     property label:
 *         def __get__(self): return self.thisptr.label
 *         def __set__(self, label):             # <<<<<<<<<<<<<<
 *             self.thisptr.label = label
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11VoronoiNode_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_label); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11VoronoiNode_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_label) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiNode_5label_2__set__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNode *)__pyx_v_self), ((PyObject *)__pyx_v_label));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11VoronoiNode_5label_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_label) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":612
 *         def __get__(self): return self.thisptr.label
 *         def __set__(self, label):
 *             self.thisptr.label = label             # <<<<<<<<<<<<<<
 * 
 *     property radius:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_label); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 612, __pyx_L1_error)
  __pyx_v_self->thisptr->label = __pyx_t_1;

  /* "cavd/netstorage.pyx":611
 *     property label:
 *         def __get__(self): return self.thisptr.label
 *         def __set__(self, label):             # <<<<<<<<<<<<<<
 *             self.thisptr.label = label
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNode.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":615
 * 
 *     property radius:
 *         def __get__(self): return self.thisptr.rad_stat_sphere             # <<<<<<<<<<<<<<
 *         def __set__(self, rad):
 *             print ("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiNode_6radius_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiNode_6radius_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiNode_6radius___get__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiNode_6radius___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->rad_stat_sphere); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNode.radius.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":616
 *     property radius:
 *         def __get__(self): return self.thisptr.rad_stat_sphere
 *         def __set__(self, rad):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.rad_stat_sphere = rad
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11VoronoiNode_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rad); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11VoronoiNode_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rad) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiNode_6radius_2__set__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNode *)__pyx_v_self), ((PyObject *)__pyx_v_rad));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11VoronoiNode_6radius_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self, PyObject *__pyx_v_rad) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":617
 *         def __get__(self): return self.thisptr.rad_stat_sphere
 *         def __set__(self, rad):
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.rad_stat_sphere = rad
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 617, __pyx_L1_error)

  /* "cavd/netstorage.pyx":618
 *         def __set__(self, rad):
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.rad_stat_sphere = rad             # <<<<<<<<<<<<<<
 * 
 * cdef class VoronoiEdge:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_rad); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 618, __pyx_L1_error)
  __pyx_v_self->thisptr->rad_stat_sphere = __pyx_t_1;

  /* "cavd/netstorage.pyx":616
 *     property radius:
 *         def __get__(self): return self.thisptr.rad_stat_sphere
 *         def __set__(self, rad):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.rad_stat_sphere = rad
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNode.radius.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiNode_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiNode_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiNode_6__reduce_cython__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiNode_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNode.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiNode_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiNode_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiNode_8__setstate_cython__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNode *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiNode_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":624
 *     Class to store the voronoi edges with some atrribute
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VOR_EDGE()
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge___cinit__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge___cinit__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  VOR_EDGE *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cavd/netstorage.pyx":625
 *     """
 *     def __cinit__(self):
 *         self.thisptr = new VOR_EDGE()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  try {
    __pyx_t_1 = new VOR_EDGE();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 625, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "cavd/netstorage.pyx":624
 *     Class to store the voronoi edges with some atrribute
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VOR_EDGE()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":627
 *         self.thisptr = new VOR_EDGE()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_2__init__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_2__init__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":630
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_4cavd_10netstorage_11VoronoiEdge_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cavd_10netstorage_11VoronoiEdge_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4cavd_10netstorage_11VoronoiEdge_4__dealloc__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cavd_10netstorage_11VoronoiEdge_4__dealloc__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cavd/netstorage.pyx":631
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property origin:
 */
  delete __pyx_v_self->thisptr;

  /* "cavd/netstorage.pyx":630
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cavd/netstorage.pyx":634
 * 
 *     property origin:
 *         def __get__(self): return self.thisptr.origin             # <<<<<<<<<<<<<<
 *         def __set__(self, origin):
 *             print ("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_6origin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_6origin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_6origin___get__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_6origin___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->from); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.origin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":635
 *     property origin:
 *         def __get__(self): return self.thisptr.origin
 *         def __set__(self, origin):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.origin = origin
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_6origin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_origin); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_6origin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_origin) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_6origin_2__set__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self), ((PyObject *)__pyx_v_origin));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_6origin_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, PyObject *__pyx_v_origin) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":636
 *         def __get__(self): return self.thisptr.origin
 *         def __set__(self, origin):
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.origin = origin
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 636, __pyx_L1_error)

  /* "cavd/netstorage.pyx":637
 *         def __set__(self, origin):
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.origin = origin             # <<<<<<<<<<<<<<
 * 
 *     property ending:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_origin); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 637, __pyx_L1_error)
  __pyx_v_self->thisptr->from = __pyx_t_1;

  /* "cavd/netstorage.pyx":635
 *     property origin:
 *         def __get__(self): return self.thisptr.origin
 *         def __set__(self, origin):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.origin = origin
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.origin.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":640
 * 
 *     property ending:
 *         def __get__(self): return self.thisptr.ending             # <<<<<<<<<<<<<<
 *         def __set__(self, ending):
 *             print ("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_6ending_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_6ending_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_6ending___get__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_6ending___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->to); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.ending.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":641
 *     property ending:
 *         def __get__(self): return self.thisptr.ending
 *         def __set__(self, ending):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.ending = ending
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_6ending_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ending); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_6ending_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_ending) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_6ending_2__set__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self), ((PyObject *)__pyx_v_ending));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_6ending_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, PyObject *__pyx_v_ending) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":642
 *         def __get__(self): return self.thisptr.ending
 *         def __set__(self, ending):
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.ending = ending
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 642, __pyx_L1_error)

  /* "cavd/netstorage.pyx":643
 *         def __set__(self, ending):
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.ending = ending             # <<<<<<<<<<<<<<
 * 
 *     property radius:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_ending); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 643, __pyx_L1_error)
  __pyx_v_self->thisptr->to = __pyx_t_1;

  /* "cavd/netstorage.pyx":641
 *     property ending:
 *         def __get__(self): return self.thisptr.ending
 *         def __set__(self, ending):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.ending = ending
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.ending.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":646
 * 
 *     property radius:
 *         def __get__(self): return self.thisptr.rad_moving_sphere             # <<<<<<<<<<<<<<
 *         def __set__(self, rad):
 *             print ("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_6radius_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_6radius_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_6radius___get__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_6radius___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->rad_moving_sphere); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.radius.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":647
 *     property radius:
 *         def __get__(self): return self.thisptr.rad_moving_sphere
 *         def __set__(self, rad):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.rad_moving_sphere = rad
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rad); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rad) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_6radius_2__set__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self), ((PyObject *)__pyx_v_rad));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_6radius_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, PyObject *__pyx_v_rad) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":648
 *         def __get__(self): return self.thisptr.rad_moving_sphere
 *         def __set__(self, rad):
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.rad_moving_sphere = rad
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 648, __pyx_L1_error)

  /* "cavd/netstorage.pyx":649
 *         def __set__(self, rad):
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.rad_moving_sphere = rad             # <<<<<<<<<<<<<<
 * 
 *     property leng:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_rad); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 649, __pyx_L1_error)
  __pyx_v_self->thisptr->rad_moving_sphere = __pyx_t_1;

  /* "cavd/netstorage.pyx":647
 *     property radius:
 *         def __get__(self): return self.thisptr.rad_moving_sphere
 *         def __set__(self, rad):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.rad_moving_sphere = rad
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.radius.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":652
 * 
 *     property leng:
 *         def __get__(self): return self.thisptr.length             # <<<<<<<<<<<<<<
 *         def __set__(self, length):
 *             print ("This value is not supposed to be modified")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_4leng_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_4leng_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_4leng___get__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_4leng___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.leng.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":653
 *     property leng:
 *         def __get__(self): return self.thisptr.length
 *         def __set__(self, length):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.length = length
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_4leng_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_length); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_4leng_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_length) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_4leng_2__set__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self), ((PyObject *)__pyx_v_length));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_4leng_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, PyObject *__pyx_v_length) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":654
 *         def __get__(self): return self.thisptr.length
 *         def __set__(self, length):
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.length = length
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 654, __pyx_L1_error)

  /* "cavd/netstorage.pyx":655
 *         def __set__(self, length):
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.length = length             # <<<<<<<<<<<<<<
 * 
 *     property delta_uc:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_length); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 655, __pyx_L1_error)
  __pyx_v_self->thisptr->length = __pyx_t_1;

  /* "cavd/netstorage.pyx":653
 *     property leng:
 *         def __get__(self): return self.thisptr.length
 *         def __set__(self, length):             # <<<<<<<<<<<<<<
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.length = length
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.leng.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":658
 * 
 *     property delta_uc:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             delta_uc = [self.thisptr.delta_uc_x, self.thisptr.delta_uc_y, self.thisptr.delta_uc_z]
 *             return delta_uc
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_8delta_uc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_8delta_uc_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_8delta_uc___get__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_8delta_uc___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self) {
  PyObject *__pyx_v_delta_uc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cavd/netstorage.pyx":659
 *     property delta_uc:
 *         def __get__(self):
 *             delta_uc = [self.thisptr.delta_uc_x, self.thisptr.delta_uc_y, self.thisptr.delta_uc_z]             # <<<<<<<<<<<<<<
 *             return delta_uc
 *         def __set__(self, delta_uc):      # Don't set this
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->delta_uc_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->delta_uc_y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->delta_uc_z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_delta_uc = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cavd/netstorage.pyx":660
 *         def __get__(self):
 *             delta_uc = [self.thisptr.delta_uc_x, self.thisptr.delta_uc_y, self.thisptr.delta_uc_z]
 *             return delta_uc             # <<<<<<<<<<<<<<
 *         def __set__(self, delta_uc):      # Don't set this
 *             """
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_delta_uc);
  __pyx_r = __pyx_v_delta_uc;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":658
 * 
 *     property delta_uc:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             delta_uc = [self.thisptr.delta_uc_x, self.thisptr.delta_uc_y, self.thisptr.delta_uc_z]
 *             return delta_uc
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.delta_uc.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_delta_uc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":661
 *             delta_uc = [self.thisptr.delta_uc_x, self.thisptr.delta_uc_y, self.thisptr.delta_uc_z]
 *             return delta_uc
 *         def __set__(self, delta_uc):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_8delta_uc_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_delta_uc); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_8delta_uc_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_delta_uc) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_8delta_uc_2__set__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self), ((PyObject *)__pyx_v_delta_uc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_8delta_uc_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, PyObject *__pyx_v_delta_uc) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":665
 *             This variable is not supposed to be modified manually
 *             """
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.delta_uc_x = delta_uc[0]
 *             self.thisptr.delta_uc_y = delta_uc[1]
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 665, __pyx_L1_error)

  /* "cavd/netstorage.pyx":666
 *             """
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.delta_uc_x = delta_uc[0]             # <<<<<<<<<<<<<<
 *             self.thisptr.delta_uc_y = delta_uc[1]
 *             self.thisptr.delta_uc_z = delta_uc[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_delta_uc, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 666, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->delta_uc_x = __pyx_t_2;

  /* "cavd/netstorage.pyx":667
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.delta_uc_x = delta_uc[0]
 *             self.thisptr.delta_uc_y = delta_uc[1]             # <<<<<<<<<<<<<<
 *             self.thisptr.delta_uc_z = delta_uc[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_delta_uc, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->delta_uc_y = __pyx_t_2;

  /* "cavd/netstorage.pyx":668
 *             self.thisptr.delta_uc_x = delta_uc[0]
 *             self.thisptr.delta_uc_y = delta_uc[1]
 *             self.thisptr.delta_uc_z = delta_uc[2]             # <<<<<<<<<<<<<<
 * 
 *     property bot_coords:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_delta_uc, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 668, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->delta_uc_z = __pyx_t_2;

  /* "cavd/netstorage.pyx":661
 *             delta_uc = [self.thisptr.delta_uc_x, self.thisptr.delta_uc_y, self.thisptr.delta_uc_z]
 *             return delta_uc
 *         def __set__(self, delta_uc):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.delta_uc.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":671
 * 
 *     property bot_coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             bot_coords = [self.thisptr.bottleneck_x, self.thisptr.bottleneck_y, self.thisptr.bottleneck_z]
 *             return bot_coords
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_10bot_coords_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_10bot_coords_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_10bot_coords___get__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_10bot_coords___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self) {
  PyObject *__pyx_v_bot_coords = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cavd/netstorage.pyx":672
 *     property bot_coords:
 *         def __get__(self):
 *             bot_coords = [self.thisptr.bottleneck_x, self.thisptr.bottleneck_y, self.thisptr.bottleneck_z]             # <<<<<<<<<<<<<<
 *             return bot_coords
 *         def __set__(self, coords):      # Don't set this
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->bottleneck_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->bottleneck_y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->bottleneck_z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_bot_coords = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cavd/netstorage.pyx":673
 *         def __get__(self):
 *             bot_coords = [self.thisptr.bottleneck_x, self.thisptr.bottleneck_y, self.thisptr.bottleneck_z]
 *             return bot_coords             # <<<<<<<<<<<<<<
 *         def __set__(self, coords):      # Don't set this
 *             """
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_bot_coords);
  __pyx_r = __pyx_v_bot_coords;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":671
 * 
 *     property bot_coords:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             bot_coords = [self.thisptr.bottleneck_x, self.thisptr.bottleneck_y, self.thisptr.bottleneck_z]
 *             return bot_coords
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.bot_coords.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bot_coords);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":674
 *             bot_coords = [self.thisptr.bottleneck_x, self.thisptr.bottleneck_y, self.thisptr.bottleneck_z]
 *             return bot_coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_10bot_coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords); /*proto*/
static int __pyx_pw_4cavd_10netstorage_11VoronoiEdge_10bot_coords_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_10bot_coords_2__set__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self), ((PyObject *)__pyx_v_coords));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_11VoronoiEdge_10bot_coords_2__set__(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, PyObject *__pyx_v_coords) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cavd/netstorage.pyx":678
 *             This variable is not supposed to be modified manually
 *             """
 *             print ("This value is not supposed to be modified")             # <<<<<<<<<<<<<<
 *             self.thisptr.bottleneck_x = coords[0]
 *             self.thisptr.bottleneck_y = coords[1]
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_This_value_is_not_supposed_to_be) < 0) __PYX_ERR(1, 678, __pyx_L1_error)

  /* "cavd/netstorage.pyx":679
 *             """
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.bottleneck_x = coords[0]             # <<<<<<<<<<<<<<
 *             self.thisptr.bottleneck_y = coords[1]
 *             self.thisptr.bottleneck_z = coords[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->bottleneck_x = __pyx_t_2;

  /* "cavd/netstorage.pyx":680
 *             print ("This value is not supposed to be modified")
 *             self.thisptr.bottleneck_x = coords[0]
 *             self.thisptr.bottleneck_y = coords[1]             # <<<<<<<<<<<<<<
 *             self.thisptr.bottleneck_z = coords[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 680, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->bottleneck_y = __pyx_t_2;

  /* "cavd/netstorage.pyx":681
 *             self.thisptr.bottleneck_x = coords[0]
 *             self.thisptr.bottleneck_y = coords[1]
 *             self.thisptr.bottleneck_z = coords[2]             # <<<<<<<<<<<<<<
 * 
 * cdef class VoronoiNetwork:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coords, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->thisptr->bottleneck_z = __pyx_t_2;

  /* "cavd/netstorage.pyx":674
 *             bot_coords = [self.thisptr.bottleneck_x, self.thisptr.bottleneck_y, self.thisptr.bottleneck_z]
 *             return bot_coords
 *         def __set__(self, coords):      # Don't set this             # <<<<<<<<<<<<<<
 *             """
 *             This variable is not supposed to be modified manually
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.bot_coords.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_6__reduce_cython__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_11VoronoiEdge_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_11VoronoiEdge_8__setstate_cython__(((struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_11VoronoiEdge_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiEdge *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiEdge.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":691
 *     #Contains a pointer to ATOM_NETWORK and a flag denoting whether radisu
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VORONOI_NETWORK()
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_14VoronoiNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cavd_10netstorage_14VoronoiNetwork_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4cavd_10netstorage_14VoronoiNetwork___cinit__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_14VoronoiNetwork___cinit__(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  VORONOI_NETWORK *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cavd/netstorage.pyx":692
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):
 *         self.thisptr = new VORONOI_NETWORK()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  try {
    __pyx_t_1 = new VORONOI_NETWORK();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 692, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "cavd/netstorage.pyx":691
 *     #Contains a pointer to ATOM_NETWORK and a flag denoting whether radisu
 *     #for each atomic species is non-zero.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new VORONOI_NETWORK()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":694
 *         self.thisptr = new VORONOI_NETWORK()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cavd_10netstorage_14VoronoiNetwork_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cavd_10netstorage_14VoronoiNetwork_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_2__init__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_2__init__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":697
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_4cavd_10netstorage_14VoronoiNetwork_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cavd_10netstorage_14VoronoiNetwork_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_4__dealloc__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_4__dealloc__(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cavd/netstorage.pyx":698
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
  delete __pyx_v_self->thisptr;

  /* "cavd/netstorage.pyx":697
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cavd/netstorage.pyx":700
 *         del self.thisptr
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.nodes.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_7size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_7size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_6size(((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_6size(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("size", 0);

  /* "cavd/netstorage.pyx":701
 * 
 *     def size(self):
 *         return self.thisptr.nodes.size()             # <<<<<<<<<<<<<<
 * 
 *     property nodes:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->nodes.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":700
 *         del self.thisptr
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.nodes.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":704
 * 
 *     property nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             nodes = []
 *             cdef vector[VOR_NODE] c_nodes = self.thisptr.nodes
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_5nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_5nodes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_5nodes___get__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_5nodes___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self) {
  PyObject *__pyx_v_nodes = NULL;
  std::vector<VOR_NODE>  __pyx_v_c_nodes;
  std::vector<VOR_NODE> ::size_type __pyx_v_i;
  PyObject *__pyx_v_node_coords = NULL;
  double __pyx_v_node_radius;
  int __pyx_v_node_label;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<VOR_NODE>  __pyx_t_2;
  std::vector<VOR_NODE> ::size_type __pyx_t_3;
  std::vector<VOR_NODE> ::size_type __pyx_t_4;
  std::vector<VOR_NODE> ::size_type __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  double __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cavd/netstorage.pyx":705
 *     property nodes:
 *         def __get__(self):
 *             nodes = []             # <<<<<<<<<<<<<<
 *             cdef vector[VOR_NODE] c_nodes = self.thisptr.nodes
 *             for i in range(c_nodes.size()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cavd/netstorage.pyx":706
 *         def __get__(self):
 *             nodes = []
 *             cdef vector[VOR_NODE] c_nodes = self.thisptr.nodes             # <<<<<<<<<<<<<<
 *             for i in range(c_nodes.size()):
 *                 node_coords = [c_nodes[i].x,c_nodes[i].y,c_nodes[i].z]
 */
  __pyx_t_2 = __pyx_v_self->thisptr->nodes;
  __pyx_v_c_nodes = __pyx_t_2;

  /* "cavd/netstorage.pyx":707
 *             nodes = []
 *             cdef vector[VOR_NODE] c_nodes = self.thisptr.nodes
 *             for i in range(c_nodes.size()):             # <<<<<<<<<<<<<<
 *                 node_coords = [c_nodes[i].x,c_nodes[i].y,c_nodes[i].z]
 *                 node_radius = c_nodes[i].rad_stat_sphere
 */
  __pyx_t_3 = __pyx_v_c_nodes.size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "cavd/netstorage.pyx":708
 *             cdef vector[VOR_NODE] c_nodes = self.thisptr.nodes
 *             for i in range(c_nodes.size()):
 *                 node_coords = [c_nodes[i].x,c_nodes[i].y,c_nodes[i].z]             # <<<<<<<<<<<<<<
 *                 node_radius = c_nodes[i].rad_stat_sphere
 *                 node_label = c_nodes[i].label
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_c_nodes[__pyx_v_i]).x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyFloat_FromDouble((__pyx_v_c_nodes[__pyx_v_i]).y); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble((__pyx_v_c_nodes[__pyx_v_i]).z); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
    __pyx_t_1 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_node_coords, ((PyObject*)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "cavd/netstorage.pyx":709
 *             for i in range(c_nodes.size()):
 *                 node_coords = [c_nodes[i].x,c_nodes[i].y,c_nodes[i].z]
 *                 node_radius = c_nodes[i].rad_stat_sphere             # <<<<<<<<<<<<<<
 *                 node_label = c_nodes[i].label
 *                 nodes.append([node_label, node_coords, node_radius])
 */
    __pyx_t_9 = (__pyx_v_c_nodes[__pyx_v_i]).rad_stat_sphere;
    __pyx_v_node_radius = __pyx_t_9;

    /* "cavd/netstorage.pyx":710
 *                 node_coords = [c_nodes[i].x,c_nodes[i].y,c_nodes[i].z]
 *                 node_radius = c_nodes[i].rad_stat_sphere
 *                 node_label = c_nodes[i].label             # <<<<<<<<<<<<<<
 *                 nodes.append([node_label, node_coords, node_radius])
 *             return nodes
 */
    __pyx_t_10 = (__pyx_v_c_nodes[__pyx_v_i]).label;
    __pyx_v_node_label = __pyx_t_10;

    /* "cavd/netstorage.pyx":711
 *                 node_radius = c_nodes[i].rad_stat_sphere
 *                 node_label = c_nodes[i].label
 *                 nodes.append([node_label, node_coords, node_radius])             # <<<<<<<<<<<<<<
 *             return nodes
 * 
 */
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_node_label); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_node_radius); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
    __Pyx_INCREF(__pyx_v_node_coords);
    __Pyx_GIVEREF(__pyx_v_node_coords);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_v_node_coords);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_7);
    __pyx_t_8 = 0;
    __pyx_t_7 = 0;
    __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_nodes, __pyx_t_6); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "cavd/netstorage.pyx":712
 *                 node_label = c_nodes[i].label
 *                 nodes.append([node_label, node_coords, node_radius])
 *             return nodes             # <<<<<<<<<<<<<<
 * 
 *     property edges:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_nodes);
  __pyx_r = __pyx_v_nodes;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":704
 * 
 *     property nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             nodes = []
 *             cdef vector[VOR_NODE] c_nodes = self.thisptr.nodes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nodes);
  __Pyx_XDECREF(__pyx_v_node_coords);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":715
 * 
 *     property edges:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             edges = []
 *             cdef vector[VOR_EDGE] c_edges = self.thisptr.edges
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_5edges_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_5edges_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_5edges___get__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_5edges___get__(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self) {
  PyObject *__pyx_v_edges = NULL;
  std::vector<VOR_EDGE>  __pyx_v_c_edges;
  std::vector<VOR_EDGE> ::size_type __pyx_v_i;
  int __pyx_v_edge_origin;
  int __pyx_v_edge_ending;
  double __pyx_v_edge_radius;
  double __pyx_v_edge_length;
  PyObject *__pyx_v_edge_boltpos = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<VOR_EDGE>  __pyx_t_2;
  std::vector<VOR_EDGE> ::size_type __pyx_t_3;
  std::vector<VOR_EDGE> ::size_type __pyx_t_4;
  std::vector<VOR_EDGE> ::size_type __pyx_t_5;
  int __pyx_t_6;
  double __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cavd/netstorage.pyx":716
 *     property edges:
 *         def __get__(self):
 *             edges = []             # <<<<<<<<<<<<<<
 *             cdef vector[VOR_EDGE] c_edges = self.thisptr.edges
 *             for i in range(c_edges.size()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_edges = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cavd/netstorage.pyx":717
 *         def __get__(self):
 *             edges = []
 *             cdef vector[VOR_EDGE] c_edges = self.thisptr.edges             # <<<<<<<<<<<<<<
 *             for i in range(c_edges.size()):
 *                 edge_origin = c_edges[i].origin
 */
  __pyx_t_2 = __pyx_v_self->thisptr->edges;
  __pyx_v_c_edges = __pyx_t_2;

  /* "cavd/netstorage.pyx":718
 *             edges = []
 *             cdef vector[VOR_EDGE] c_edges = self.thisptr.edges
 *             for i in range(c_edges.size()):             # <<<<<<<<<<<<<<
 *                 edge_origin = c_edges[i].origin
 *                 edge_ending = c_edges[i].ending
 */
  __pyx_t_3 = __pyx_v_c_edges.size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "cavd/netstorage.pyx":719
 *             cdef vector[VOR_EDGE] c_edges = self.thisptr.edges
 *             for i in range(c_edges.size()):
 *                 edge_origin = c_edges[i].origin             # <<<<<<<<<<<<<<
 *                 edge_ending = c_edges[i].ending
 *                 edge_radius = c_edges[i].rad_moving_sphere
 */
    __pyx_t_6 = (__pyx_v_c_edges[__pyx_v_i]).from;
    __pyx_v_edge_origin = __pyx_t_6;

    /* "cavd/netstorage.pyx":720
 *             for i in range(c_edges.size()):
 *                 edge_origin = c_edges[i].origin
 *                 edge_ending = c_edges[i].ending             # <<<<<<<<<<<<<<
 *                 edge_radius = c_edges[i].rad_moving_sphere
 *                 edge_length = c_edges[i].length
 */
    __pyx_t_6 = (__pyx_v_c_edges[__pyx_v_i]).to;
    __pyx_v_edge_ending = __pyx_t_6;

    /* "cavd/netstorage.pyx":721
 *                 edge_origin = c_edges[i].origin
 *                 edge_ending = c_edges[i].ending
 *                 edge_radius = c_edges[i].rad_moving_sphere             # <<<<<<<<<<<<<<
 *                 edge_length = c_edges[i].length
 *                 edge_boltpos = [c_edges[i].bottleneck_x,c_edges[i].bottleneck_y,c_edges[i].bottleneck_z]
 */
    __pyx_t_7 = (__pyx_v_c_edges[__pyx_v_i]).rad_moving_sphere;
    __pyx_v_edge_radius = __pyx_t_7;

    /* "cavd/netstorage.pyx":722
 *                 edge_ending = c_edges[i].ending
 *                 edge_radius = c_edges[i].rad_moving_sphere
 *                 edge_length = c_edges[i].length             # <<<<<<<<<<<<<<
 *                 edge_boltpos = [c_edges[i].bottleneck_x,c_edges[i].bottleneck_y,c_edges[i].bottleneck_z]
 *                 edges.append([edge_origin, edge_ending, edge_radius, edge_length, edge_boltpos])
 */
    __pyx_t_7 = (__pyx_v_c_edges[__pyx_v_i]).length;
    __pyx_v_edge_length = __pyx_t_7;

    /* "cavd/netstorage.pyx":723
 *                 edge_radius = c_edges[i].rad_moving_sphere
 *                 edge_length = c_edges[i].length
 *                 edge_boltpos = [c_edges[i].bottleneck_x,c_edges[i].bottleneck_y,c_edges[i].bottleneck_z]             # <<<<<<<<<<<<<<
 *                 edges.append([edge_origin, edge_ending, edge_radius, edge_length, edge_boltpos])
 *             return edges
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_c_edges[__pyx_v_i]).bottleneck_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyFloat_FromDouble((__pyx_v_c_edges[__pyx_v_i]).bottleneck_y); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyFloat_FromDouble((__pyx_v_c_edges[__pyx_v_i]).bottleneck_z); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_9);
    __pyx_t_1 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_edge_boltpos, ((PyObject*)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "cavd/netstorage.pyx":724
 *                 edge_length = c_edges[i].length
 *                 edge_boltpos = [c_edges[i].bottleneck_x,c_edges[i].bottleneck_y,c_edges[i].bottleneck_z]
 *                 edges.append([edge_origin, edge_ending, edge_radius, edge_length, edge_boltpos])             # <<<<<<<<<<<<<<
 *             return edges
 * 
 */
    __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_edge_origin); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_edge_ending); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_edge_radius); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_edge_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = PyList_New(5); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_11, 3, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_edge_boltpos);
    __Pyx_GIVEREF(__pyx_v_edge_boltpos);
    PyList_SET_ITEM(__pyx_t_11, 4, __pyx_v_edge_boltpos);
    __pyx_t_10 = 0;
    __pyx_t_9 = 0;
    __pyx_t_8 = 0;
    __pyx_t_1 = 0;
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_edges, __pyx_t_11); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(1, 724, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }

  /* "cavd/netstorage.pyx":725
 *                 edge_boltpos = [c_edges[i].bottleneck_x,c_edges[i].bottleneck_y,c_edges[i].bottleneck_z]
 *                 edges.append([edge_origin, edge_ending, edge_radius, edge_length, edge_boltpos])
 *             return edges             # <<<<<<<<<<<<<<
 * 
 *     def prune(self, radius):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_edges);
  __pyx_r = __pyx_v_edges;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":715
 * 
 *     property edges:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             edges = []
 *             cdef vector[VOR_EDGE] c_edges = self.thisptr.edges
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.edges.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edges);
  __Pyx_XDECREF(__pyx_v_edge_boltpos);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":727
 *             return edges
 * 
 *     def prune(self, radius):             # <<<<<<<<<<<<<<
 *         """
 *         Removes the edges that do not allow a sphere to pass.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_9prune(PyObject *__pyx_v_self, PyObject *__pyx_v_radius); /*proto*/
static char __pyx_doc_4cavd_10netstorage_14VoronoiNetwork_8prune[] = "\n        Removes the edges that do not allow a sphere to pass.\n        Arguments:\n            radius:\n                Radius of the sphere\n        Returns:\n            Instance of VoronoiNetwork with edges pruned.\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_9prune(PyObject *__pyx_v_self, PyObject *__pyx_v_radius) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_8prune(((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_radius));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_8prune(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_radius) {
  VORONOI_NETWORK __pyx_v_newcvornet;
  struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_newvornet = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("prune", 0);

  /* "cavd/netstorage.pyx":736
 *             Instance of VoronoiNetwork with edges pruned.
 *         """
 *         cdef VORONOI_NETWORK newcvornet = self.thisptr.prune(radius)             # <<<<<<<<<<<<<<
 *         newvornet = VoronoiNetwork()
 *         newvornet.thisptr = &newcvornet
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_radius); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 736, __pyx_L1_error)
  __pyx_v_newcvornet = __pyx_v_self->thisptr->prune(__pyx_t_1);

  /* "cavd/netstorage.pyx":737
 *         """
 *         cdef VORONOI_NETWORK newcvornet = self.thisptr.prune(radius)
 *         newvornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *         newvornet.thisptr = &newcvornet
 *         return newvornet
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cavd_10netstorage_VoronoiNetwork)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_newvornet = ((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cavd/netstorage.pyx":738
 *         cdef VORONOI_NETWORK newcvornet = self.thisptr.prune(radius)
 *         newvornet = VoronoiNetwork()
 *         newvornet.thisptr = &newcvornet             # <<<<<<<<<<<<<<
 *         return newvornet
 * 
 */
  __pyx_v_newvornet->thisptr = (&__pyx_v_newcvornet);

  /* "cavd/netstorage.pyx":739
 *         newvornet = VoronoiNetwork()
 *         newvornet.thisptr = &newcvornet
 *         return newvornet             # <<<<<<<<<<<<<<
 * 
 *     def analyze_writeto_XYZ(self, name, double probeRad, atmnet,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_newvornet));
  __pyx_r = ((PyObject *)__pyx_v_newvornet);
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":727
 *             return edges
 * 
 *     def prune(self, radius):             # <<<<<<<<<<<<<<
 *         """
 *         Removes the edges that do not allow a sphere to pass.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.prune", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_newvornet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":741
 *         return newvornet
 * 
 *     def analyze_writeto_XYZ(self, name, double probeRad, atmnet,             # <<<<<<<<<<<<<<
 *             int shift_x=0, int shift_y=0, int shift_z=0):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_11analyze_writeto_XYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cavd_10netstorage_14VoronoiNetwork_10analyze_writeto_XYZ[] = "\n        Create diagrams of 1) Voronoi network and 2) accessible Voronoi \n        network, and write the diagrams in VTK files and the Voronoi \n        networks in XYZ files. Useful for visualizing the Voronoi network.\n        Args:\n            name:\n                Name to be used for output files.\n            probeRad:\n                Radius of the probe.\n            atmnet:\n                cavd.netstorage.AtomNetwork\n            shift_x (default=0):\n                Shift the accessible Voronoi network along x-axis\n            shift_y (default=0):\n                Shift the accessible Voronoi network along y-axis\n            shift_z (default=0):\n                Shift the accessible Voronoi network along z-axis\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_11analyze_writeto_XYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  double __pyx_v_probeRad;
  PyObject *__pyx_v_atmnet = 0;
  int __pyx_v_shift_x;
  int __pyx_v_shift_y;
  int __pyx_v_shift_z;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("analyze_writeto_XYZ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_probeRad,&__pyx_n_s_atmnet,&__pyx_n_s_shift_x,&__pyx_n_s_shift_y,&__pyx_n_s_shift_z,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_probeRad)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("analyze_writeto_XYZ", 0, 3, 6, 1); __PYX_ERR(1, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("analyze_writeto_XYZ", 0, 3, 6, 2); __PYX_ERR(1, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shift_x);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shift_y);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shift_z);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "analyze_writeto_XYZ") < 0)) __PYX_ERR(1, 741, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_probeRad = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_probeRad == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 741, __pyx_L3_error)
    __pyx_v_atmnet = values[2];
    if (values[3]) {
      __pyx_v_shift_x = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_shift_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 742, __pyx_L3_error)
    } else {
      __pyx_v_shift_x = ((int)0);
    }
    if (values[4]) {
      __pyx_v_shift_y = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_shift_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 742, __pyx_L3_error)
    } else {
      __pyx_v_shift_y = ((int)0);
    }
    if (values[5]) {
      __pyx_v_shift_z = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_shift_z == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 742, __pyx_L3_error)
    } else {
      __pyx_v_shift_z = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("analyze_writeto_XYZ", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 741, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.analyze_writeto_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_10analyze_writeto_XYZ(((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_self), __pyx_v_name, __pyx_v_probeRad, __pyx_v_atmnet, __pyx_v_shift_x, __pyx_v_shift_y, __pyx_v_shift_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_10analyze_writeto_XYZ(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_name, double __pyx_v_probeRad, PyObject *__pyx_v_atmnet, int __pyx_v_shift_x, int __pyx_v_shift_y, int __pyx_v_shift_z) {
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  CYTHON_UNUSED char *__pyx_v_cname;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  ATOM_NETWORK *__pyx_t_4;
  char *__pyx_t_5;
  __Pyx_RefNannySetupContext("analyze_writeto_XYZ", 0);
  __Pyx_INCREF(__pyx_v_name);

  /* "cavd/netstorage.pyx":761
 *                 Shift the accessible Voronoi network along z-axis
 *         """
 *         if isinstance(name, unicode):             # <<<<<<<<<<<<<<
 *             name = (<unicode>name).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_name); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":762
 *         """
 *         if isinstance(name, unicode):
 *             name = (<unicode>name).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 */
    if (unlikely(__pyx_v_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 762, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_name)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_name, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":761
 *                 Shift the accessible Voronoi network along z-axis
 *         """
 *         if isinstance(name, unicode):             # <<<<<<<<<<<<<<
 *             name = (<unicode>name).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":764
 *             name = (<unicode>name).encode('utf8')
 * 
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *         cdef char* cname = name
 *         visVoro(name, probeRad, shift_x, shift_y, shift_z, self.thisptr,
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_4cavd_10netstorage_AtomNetwork)))) __PYX_ERR(1, 764, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_4;

  /* "cavd/netstorage.pyx":765
 * 
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *         cdef char* cname = name             # <<<<<<<<<<<<<<
 *         visVoro(name, probeRad, shift_x, shift_y, shift_z, self.thisptr,
 *                 c_atmnetptr)
 */
  __pyx_t_5 = __Pyx_PyObject_AsWritableString(__pyx_v_name); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(1, 765, __pyx_L1_error)
  __pyx_v_cname = __pyx_t_5;

  /* "cavd/netstorage.pyx":766
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *         cdef char* cname = name
 *         visVoro(name, probeRad, shift_x, shift_y, shift_z, self.thisptr,             # <<<<<<<<<<<<<<
 *                 c_atmnetptr)
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_AsWritableString(__pyx_v_name); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(1, 766, __pyx_L1_error)

  /* "cavd/netstorage.pyx":767
 *         cdef char* cname = name
 *         visVoro(name, probeRad, shift_x, shift_y, shift_z, self.thisptr,
 *                 c_atmnetptr)             # <<<<<<<<<<<<<<
 * 
 *     def write_to_XYZ(self, filename, double cutoff_radius=0):
 */
  visVoro(__pyx_t_5, __pyx_v_probeRad, __pyx_v_shift_x, __pyx_v_shift_y, __pyx_v_shift_z, __pyx_v_self->thisptr, __pyx_v_c_atmnetptr);

  /* "cavd/netstorage.pyx":741
 *         return newvornet
 * 
 *     def analyze_writeto_XYZ(self, name, double probeRad, atmnet,             # <<<<<<<<<<<<<<
 *             int shift_x=0, int shift_y=0, int shift_z=0):
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.analyze_writeto_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":769
 *                 c_atmnetptr)
 * 
 *     def write_to_XYZ(self, filename, double cutoff_radius=0):             # <<<<<<<<<<<<<<
 *         """
 *         Write only voronoi node information to XYZ file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_13write_to_XYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cavd_10netstorage_14VoronoiNetwork_12write_to_XYZ[] = "\n        Write only voronoi node information to XYZ file.\n        Args:\n            filename:\n                string\n                Name of file to which voronoi node info is written.\n            cutoff_radius:\n                float\n                Threshold radius (default=0)\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_13write_to_XYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  double __pyx_v_cutoff_radius;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_to_XYZ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_cutoff_radius,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cutoff_radius);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write_to_XYZ") < 0)) __PYX_ERR(1, 769, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    if (values[1]) {
      __pyx_v_cutoff_radius = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_cutoff_radius == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 769, __pyx_L3_error)
    } else {
      __pyx_v_cutoff_radius = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_to_XYZ", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 769, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.write_to_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_12write_to_XYZ(((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_self), __pyx_v_filename, __pyx_v_cutoff_radius);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_12write_to_XYZ(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_filename, double __pyx_v_cutoff_radius) {
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("write_to_XYZ", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "cavd/netstorage.pyx":780
 *                 Threshold radius (default=0)
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":781
 *         """
 *         if isinstance(filename, unicode):
 *             filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *         cdef char* c_filename = filename
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 781, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":780
 *                 Threshold radius (default=0)
 *         """
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":783
 *             filename = (<unicode>filename).encode('utf8')
 * 
 *         cdef char* c_filename = filename             # <<<<<<<<<<<<<<
 *         if not writeVornetToXYZ(c_filename, self.thisptr,
 *                 cutoff_radius):
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 783, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "cavd/netstorage.pyx":784
 * 
 *         cdef char* c_filename = filename
 *         if not writeVornetToXYZ(c_filename, self.thisptr,             # <<<<<<<<<<<<<<
 *                 cutoff_radius):
 *             raise ValueError
 */
  __pyx_t_2 = ((!(writeToXYZ(__pyx_v_c_filename, __pyx_v_self->thisptr, __pyx_v_cutoff_radius) != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cavd/netstorage.pyx":786
 *         if not writeVornetToXYZ(c_filename, self.thisptr,
 *                 cutoff_radius):
 *             raise ValueError             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(1, 786, __pyx_L1_error)

    /* "cavd/netstorage.pyx":784
 * 
 *         cdef char* c_filename = filename
 *         if not writeVornetToXYZ(c_filename, self.thisptr,             # <<<<<<<<<<<<<<
 *                 cutoff_radius):
 *             raise ValueError
 */
  }

  /* "cavd/netstorage.pyx":769
 *                 c_atmnetptr)
 * 
 *     def write_to_XYZ(self, filename, double cutoff_radius=0):             # <<<<<<<<<<<<<<
 *         """
 *         Write only voronoi node information to XYZ file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.write_to_XYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":789
 * 
 *     @classmethod
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_15perform_voronoi_decomposition(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cavd_10netstorage_14VoronoiNetwork_14perform_voronoi_decomposition[] = "\n        Performs weighted voronoi decomposition of atoms in the AtomNetwork \n        to analyze void space and generate voronoi nodes, edges and faces.\n        Arguments:\n            saveVorCells (optional): \n                Flag to denote whether to save the VorCells.\n                Reserved for future use, so ignore this.\n        Returns:\n            Instance of VoronoiNetwork\n        ";
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_15perform_voronoi_decomposition(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_saveVorCells = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("perform_voronoi_decomposition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atmnet,&__pyx_n_s_saveVorCells,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_saveVorCells);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "perform_voronoi_decomposition") < 0)) __PYX_ERR(1, 789, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_saveVorCells = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("perform_voronoi_decomposition", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 789, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.perform_voronoi_decomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_14perform_voronoi_decomposition(((PyTypeObject*)__pyx_v_cls), __pyx_v_atmnet, __pyx_v_saveVorCells);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_14perform_voronoi_decomposition(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_saveVorCells) {
  struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_vornet = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnetptr;
  std::vector<VOR_CELL>  __pyx_v_vcells;
  std::vector<BASIC_VCELL>  __pyx_v_bvcells;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ATOM_NETWORK *__pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("perform_voronoi_decomposition", 0);

  /* "cavd/netstorage.pyx":801
 *         """
 *         #Calls Zeo++ performVoronoiDecomp function defined in network.cc.
 *         vornet = VoronoiNetwork()             # <<<<<<<<<<<<<<
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr
 *         cdef vector[VOR_CELL] vcells
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cavd_10netstorage_VoronoiNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_vornet = ((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cavd/netstorage.pyx":802
 *         #Calls Zeo++ performVoronoiDecomp function defined in network.cc.
 *         vornet = VoronoiNetwork()
 *         cdef ATOM_NETWORK* c_atmnetptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *         cdef vector[VOR_CELL] vcells
 *         cdef vector[BASIC_VCELL] bvcells
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_4cavd_10netstorage_AtomNetwork)))) __PYX_ERR(1, 802, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnetptr = __pyx_t_2;

  /* "cavd/netstorage.pyx":806
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print self.rad_flag
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             #raise ValueError # Change it to appropriate error
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_atmnet, __pyx_n_s_rad_flag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 806, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cavd/netstorage.pyx":807
 *         #print self.rad_flag
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):             # <<<<<<<<<<<<<<
 *             #raise ValueError # Change it to appropriate error
 *             raise PerformVDError
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_saveVorCells); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 807, __pyx_L1_error)

  /* "cavd/netstorage.pyx":806
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print self.rad_flag
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             #raise ValueError # Change it to appropriate error
 */
  __pyx_t_5 = ((!(performVoronoiDecomp(__pyx_t_3, __pyx_v_c_atmnetptr, __pyx_v_vornet->thisptr, (&__pyx_v_vcells), __pyx_t_4, (&__pyx_v_bvcells)) != 0)) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "cavd/netstorage.pyx":809
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             #raise ValueError # Change it to appropriate error
 *             raise PerformVDError             # <<<<<<<<<<<<<<
 *         #cdef int N
 *         #vorcelllist = []
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PerformVDError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 809, __pyx_L1_error)

    /* "cavd/netstorage.pyx":806
 *         cdef vector[BASIC_VCELL] bvcells
 *         #print self.rad_flag
 *         if not performVoronoiDecomp(atmnet.rad_flag, c_atmnetptr,             # <<<<<<<<<<<<<<
 *                 vornet.thisptr, &vcells, saveVorCells, &bvcells):
 *             #raise ValueError # Change it to appropriate error
 */
  }

  /* "cavd/netstorage.pyx":824
 *             #basicvcell.thisptr = &(bvcells[i])
 *             #bvcelllist.append(bvcells[i])
 *         return vornet             # <<<<<<<<<<<<<<
 * 
 *     def parse_symmetry(self,symm_label):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vornet));
  __pyx_r = ((PyObject *)__pyx_v_vornet);
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":789
 * 
 *     @classmethod
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.perform_voronoi_decomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vornet);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":826
 *         return vornet
 * 
 *     def parse_symmetry(self,symm_label):             # <<<<<<<<<<<<<<
 *         cdef vector[int] c_symm_label
 *         for i in range(len(symm_label)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_17parse_symmetry(PyObject *__pyx_v_self, PyObject *__pyx_v_symm_label); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_17parse_symmetry(PyObject *__pyx_v_self, PyObject *__pyx_v_symm_label) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_symmetry (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_16parse_symmetry(((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_self), ((PyObject *)__pyx_v_symm_label));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_16parse_symmetry(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self, PyObject *__pyx_v_symm_label) {
  std::vector<int>  __pyx_v_c_symm_label;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("parse_symmetry", 0);

  /* "cavd/netstorage.pyx":828
 *     def parse_symmetry(self,symm_label):
 *         cdef vector[int] c_symm_label
 *         for i in range(len(symm_label)):             # <<<<<<<<<<<<<<
 *             c_symm_label.push_back(symm_label[i])
 *         parseNetworkSymmetry(c_symm_label, self.thisptr)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_symm_label); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 828, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cavd/netstorage.pyx":829
 *         cdef vector[int] c_symm_label
 *         for i in range(len(symm_label)):
 *             c_symm_label.push_back(symm_label[i])             # <<<<<<<<<<<<<<
 *         parseNetworkSymmetry(c_symm_label, self.thisptr)
 *         return self
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_symm_label, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 829, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_v_c_symm_label.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 829, __pyx_L1_error)
    }
  }

  /* "cavd/netstorage.pyx":830
 *         for i in range(len(symm_label)):
 *             c_symm_label.push_back(symm_label[i])
 *         parseNetworkSymmetry(c_symm_label, self.thisptr)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  parseNetworkSymmetry(__pyx_v_c_symm_label, __pyx_v_self->thisptr);

  /* "cavd/netstorage.pyx":831
 *             c_symm_label.push_back(symm_label[i])
 *         parseNetworkSymmetry(c_symm_label, self.thisptr)
 *         return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":826
 *         return vornet
 * 
 *     def parse_symmetry(self,symm_label):             # <<<<<<<<<<<<<<
 *         cdef vector[int] c_symm_label
 *         for i in range(len(symm_label)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.parse_symmetry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_18__reduce_cython__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cavd_10netstorage_14VoronoiNetwork_20__setstate_cython__(((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_14VoronoiNetwork_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.VoronoiNetwork.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":834
 * 
 * 
 * def substitute_atoms(atmnet, substituteSeed, radialFlag):             # <<<<<<<<<<<<<<
 *     """
 *     Attempt to substitute every other Si atom with Al atom.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_1substitute_atoms(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cavd_10netstorage_substitute_atoms[] = "\n    Attempt to substitute every other Si atom with Al atom.\n    AtomNetwork may only consist of Si and O atoms, where each Si atom \n    must be bonded to exactly 4 oxygen atoms and each oxygen atom must \n    be bonded to exactly 2 Si atoms. Raises exception if the substitution\n    is not successful. \n    Args:\n        atmnet:\n            cavd.netstorage.AtomNetwork\n        substiuteSeed:\n            Boolean flag to specify whether the seeded Si atom is \n            substituted or not. Since only 2 configurations are possible \n            if the structure is consistent, changing this parameter enables \n            generation of all configurations. \n        radialFlag:\n            Boolean flag to specify whether atomic sizes are to be used.\n    Returns:\n        If successful, returns AtomNetwork instance with Si replaced with Al\n        and the number of substitutions. \n    ";
static PyMethodDef __pyx_mdef_4cavd_10netstorage_1substitute_atoms = {"substitute_atoms", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_1substitute_atoms, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cavd_10netstorage_substitute_atoms};
static PyObject *__pyx_pw_4cavd_10netstorage_1substitute_atoms(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_atmnet = 0;
  PyObject *__pyx_v_substituteSeed = 0;
  PyObject *__pyx_v_radialFlag = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("substitute_atoms (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atmnet,&__pyx_n_s_substituteSeed,&__pyx_n_s_radialFlag,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atmnet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_substituteSeed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("substitute_atoms", 1, 3, 3, 1); __PYX_ERR(1, 834, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radialFlag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("substitute_atoms", 1, 3, 3, 2); __PYX_ERR(1, 834, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "substitute_atoms") < 0)) __PYX_ERR(1, 834, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_atmnet = values[0];
    __pyx_v_substituteSeed = values[1];
    __pyx_v_radialFlag = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("substitute_atoms", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 834, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.substitute_atoms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_substitute_atoms(__pyx_self, __pyx_v_atmnet, __pyx_v_substituteSeed, __pyx_v_radialFlag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_substitute_atoms(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atmnet, PyObject *__pyx_v_substituteSeed, PyObject *__pyx_v_radialFlag) {
  int __pyx_v_substitutionNo[1];
  struct __pyx_obj_4cavd_10netstorage_AtomNetwork *__pyx_v_atmnet_copy = NULL;
  ATOM_NETWORK *__pyx_v_c_atmnet_ptr;
  int __pyx_v_subNo;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ATOM_NETWORK *__pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("substitute_atoms", 0);

  /* "cavd/netstorage.pyx":856
 *     """
 *     cdef int substitutionNo[1]
 *     atmnet_copy = AtomNetwork()             # <<<<<<<<<<<<<<
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_atmnet_copy = ((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cavd/netstorage.pyx":857
 *     cdef int substitutionNo[1]
 *     atmnet_copy = AtomNetwork()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr             # <<<<<<<<<<<<<<
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,
 *             substitutionNo, radialFlag):
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_atmnet, __pyx_ptype_4cavd_10netstorage_AtomNetwork)))) __PYX_ERR(1, 857, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_obj_4cavd_10netstorage_AtomNetwork *)__pyx_v_atmnet)->thisptr;
  __pyx_v_c_atmnet_ptr = __pyx_t_2;

  /* "cavd/netstorage.pyx":858
 *     atmnet_copy = AtomNetwork()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,             # <<<<<<<<<<<<<<
 *             substitutionNo, radialFlag):
 *         raise ValueError
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_substituteSeed); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 858, __pyx_L1_error)

  /* "cavd/netstorage.pyx":859
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,
 *             substitutionNo, radialFlag):             # <<<<<<<<<<<<<<
 *         raise ValueError
 *     subNo = substitutionNo[0]
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_radialFlag); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 859, __pyx_L1_error)

  /* "cavd/netstorage.pyx":858
 *     atmnet_copy = AtomNetwork()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,             # <<<<<<<<<<<<<<
 *             substitutionNo, radialFlag):
 *         raise ValueError
 */
  __pyx_t_5 = ((!(substituteAtoms(__pyx_v_c_atmnet_ptr, __pyx_v_atmnet_copy->thisptr, __pyx_t_3, __pyx_v_substitutionNo, __pyx_t_4) != 0)) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "cavd/netstorage.pyx":860
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,
 *             substitutionNo, radialFlag):
 *         raise ValueError             # <<<<<<<<<<<<<<
 *     subNo = substitutionNo[0]
 *     return atmnet_copy, subNo
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    __PYX_ERR(1, 860, __pyx_L1_error)

    /* "cavd/netstorage.pyx":858
 *     atmnet_copy = AtomNetwork()
 *     c_atmnet_ptr = (<AtomNetwork?>atmnet).thisptr
 *     if not c_substituteAtoms(c_atmnet_ptr, atmnet_copy.thisptr, substituteSeed,             # <<<<<<<<<<<<<<
 *             substitutionNo, radialFlag):
 *         raise ValueError
 */
  }

  /* "cavd/netstorage.pyx":861
 *             substitutionNo, radialFlag):
 *         raise ValueError
 *     subNo = substitutionNo[0]             # <<<<<<<<<<<<<<
 *     return atmnet_copy, subNo
 * 
 */
  __pyx_v_subNo = (__pyx_v_substitutionNo[0]);

  /* "cavd/netstorage.pyx":862
 *         raise ValueError
 *     subNo = substitutionNo[0]
 *     return atmnet_copy, subNo             # <<<<<<<<<<<<<<
 * 
 * def connection_values(filename, vornet):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_subNo); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)__pyx_v_atmnet_copy));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_atmnet_copy));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_atmnet_copy));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":834
 * 
 * 
 * def substitute_atoms(atmnet, substituteSeed, radialFlag):             # <<<<<<<<<<<<<<
 *     """
 *     Attempt to substitute every other Si atom with Al atom.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cavd.netstorage.substitute_atoms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atmnet_copy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":864
 *     return atmnet_copy, subNo
 * 
 * def connection_values(filename, vornet):             # <<<<<<<<<<<<<<
 *     """
 * 	Computes the Radius of the largest included sphere, free sphere
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_3connection_values(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cavd_10netstorage_2connection_values[] = "\n\tComputes the Radius of the largest included sphere, free sphere \n\tand included sphere along free sphere path. \n\tArguments:\n\tfilename:\n\t\tName of file where the diameters are stored.\n    ";
static PyMethodDef __pyx_mdef_4cavd_10netstorage_3connection_values = {"connection_values", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_3connection_values, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cavd_10netstorage_2connection_values};
static PyObject *__pyx_pw_4cavd_10netstorage_3connection_values(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_vornet = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connection_values (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_vornet,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vornet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connection_values", 1, 2, 2, 1); __PYX_ERR(1, 864, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "connection_values") < 0)) __PYX_ERR(1, 864, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_vornet = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("connection_values", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 864, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.connection_values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_2connection_values(__pyx_self, __pyx_v_filename, __pyx_v_vornet);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_2connection_values(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_vornet) {
  VORONOI_NETWORK *__pyx_v_vornet_ptr;
  char *__pyx_v_c_fname;
  double __pyx_v_c_Ri;
  double __pyx_v_c_Rf;
  double __pyx_v_c_Rif;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  VORONOI_NETWORK *__pyx_t_4;
  char *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("connection_values", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "cavd/netstorage.pyx":873
 *     """
 * 
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cavd/netstorage.pyx":874
 * 
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 * 
 *     vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 874, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cavd/netstorage.pyx":873
 *     """
 * 
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 * 
 */
  }

  /* "cavd/netstorage.pyx":876
 *         filename = (<unicode>filename).encode('utf8')
 * 
 *     vornet_ptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *     cdef char* c_fname = filename
 *     cdef double c_Ri,c_Rf,c_Rif
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_ptype_4cavd_10netstorage_VoronoiNetwork)))) __PYX_ERR(1, 876, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_vornet_ptr = __pyx_t_4;

  /* "cavd/netstorage.pyx":877
 * 
 *     vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     cdef char* c_fname = filename             # <<<<<<<<<<<<<<
 *     cdef double c_Ri,c_Rf,c_Rif
 *     throughVorNet(vornet_ptr, c_fname, &c_Ri, &c_Rf, &c_Rif)
 */
  __pyx_t_5 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(1, 877, __pyx_L1_error)
  __pyx_v_c_fname = __pyx_t_5;

  /* "cavd/netstorage.pyx":879
 *     cdef char* c_fname = filename
 *     cdef double c_Ri,c_Rf,c_Rif
 *     throughVorNet(vornet_ptr, c_fname, &c_Ri, &c_Rf, &c_Rif)             # <<<<<<<<<<<<<<
 *     return c_Ri,c_Rf,c_Rif
 * 
 */
  (void)(throughVorNet(__pyx_v_vornet_ptr, __pyx_v_c_fname, (&__pyx_v_c_Ri), (&__pyx_v_c_Rf), (&__pyx_v_c_Rif)));

  /* "cavd/netstorage.pyx":880
 *     cdef double c_Ri,c_Rf,c_Rif
 *     throughVorNet(vornet_ptr, c_fname, &c_Ri, &c_Rf, &c_Rif)
 *     return c_Ri,c_Rf,c_Rif             # <<<<<<<<<<<<<<
 * 
 * def connection_values_list(filename, vornet):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_c_Ri); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_c_Rf); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_c_Rif); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
  __pyx_t_3 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":864
 *     return atmnet_copy, subNo
 * 
 * def connection_values(filename, vornet):             # <<<<<<<<<<<<<<
 *     """
 * 	Computes the Radius of the largest included sphere, free sphere
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cavd.netstorage.connection_values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cavd/netstorage.pyx":882
 *     return c_Ri,c_Rf,c_Rif
 * 
 * def connection_values_list(filename, vornet):             # <<<<<<<<<<<<<<
 *     conn_values = []
 *     if isinstance(filename, unicode):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cavd_10netstorage_5connection_values_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_4cavd_10netstorage_5connection_values_list = {"connection_values_list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_5connection_values_list, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4cavd_10netstorage_5connection_values_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_vornet = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connection_values_list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_vornet,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vornet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connection_values_list", 1, 2, 2, 1); __PYX_ERR(1, 882, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "connection_values_list") < 0)) __PYX_ERR(1, 882, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = values[0];
    __pyx_v_vornet = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("connection_values_list", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 882, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cavd.netstorage.connection_values_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cavd_10netstorage_4connection_values_list(__pyx_self, __pyx_v_filename, __pyx_v_vornet);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cavd_10netstorage_4connection_values_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_vornet) {
  PyObject *__pyx_v_conn_values = NULL;
  VORONOI_NETWORK *__pyx_v_vornet_ptr;
  char *__pyx_v_c_fname;
  std::vector<double>  __pyx_v_values;
  std::vector<double> ::size_type __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  VORONOI_NETWORK *__pyx_t_4;
  char *__pyx_t_5;
  std::vector<double> ::size_type __pyx_t_6;
  std::vector<double> ::size_type __pyx_t_7;
  std::vector<double> ::size_type __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("connection_values_list", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "cavd/netstorage.pyx":883
 * 
 * def connection_values_list(filename, vornet):
 *     conn_values = []             # <<<<<<<<<<<<<<
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_conn_values = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cavd/netstorage.pyx":884
 * def connection_values_list(filename, vornet):
 *     conn_values = []
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_filename); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "cavd/netstorage.pyx":885
 *     conn_values = []
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')             # <<<<<<<<<<<<<<
 *     vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     cdef char* c_fname = filename
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 885, __pyx_L1_error)
    }
    __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_filename, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cavd/netstorage.pyx":884
 * def connection_values_list(filename, vornet):
 *     conn_values = []
 *     if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *         filename = (<unicode>filename).encode('utf8')
 *     vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 */
  }

  /* "cavd/netstorage.pyx":886
 *     if isinstance(filename, unicode):
 *         filename = (<unicode>filename).encode('utf8')
 *     vornet_ptr = (<VoronoiNetwork?>vornet).thisptr             # <<<<<<<<<<<<<<
 *     cdef char* c_fname = filename
 *     cdef vector[double] values
 */
  if (!(likely(__Pyx_TypeTest(__pyx_v_vornet, __pyx_ptype_4cavd_10netstorage_VoronoiNetwork)))) __PYX_ERR(1, 886, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork *)__pyx_v_vornet)->thisptr;
  __pyx_v_vornet_ptr = __pyx_t_4;

  /* "cavd/netstorage.pyx":887
 *         filename = (<unicode>filename).encode('utf8')
 *     vornet_ptr = (<VoronoiNetwork?>vornet).thisptr
 *     cdef char* c_fname = filename             # <<<<<<<<<<<<<<
 *     cdef vector[double] values
 *     calculateConnParameters(vornet_ptr, c_fname, &values)
 */
  __pyx_t_5 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(1, 887, __pyx_L1_error)
  __pyx_v_c_fname = __pyx_t_5;

  /* "cavd/netstorage.pyx":889
 *     cdef char* c_fname = filename
 *     cdef vector[double] values
 *     calculateConnParameters(vornet_ptr, c_fname, &values)             # <<<<<<<<<<<<<<
 *     conn_values = []
 *     for i in range(values.size()):
 */
  calculateConnParameters(__pyx_v_vornet_ptr, __pyx_v_c_fname, (&__pyx_v_values));

  /* "cavd/netstorage.pyx":890
 *     cdef vector[double] values
 *     calculateConnParameters(vornet_ptr, c_fname, &values)
 *     conn_values = []             # <<<<<<<<<<<<<<
 *     for i in range(values.size()):
 *         conn_values.append(values[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_conn_values, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "cavd/netstorage.pyx":891
 *     calculateConnParameters(vornet_ptr, c_fname, &values)
 *     conn_values = []
 *     for i in range(values.size()):             # <<<<<<<<<<<<<<
 *         conn_values.append(values[i])
 *     return conn_values
 */
  __pyx_t_6 = __pyx_v_values.size();
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "cavd/netstorage.pyx":892
 *     conn_values = []
 *     for i in range(values.size()):
 *         conn_values.append(values[i])             # <<<<<<<<<<<<<<
 *     return conn_values
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_values[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 892, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_conn_values, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 892, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "cavd/netstorage.pyx":893
 *     for i in range(values.size()):
 *         conn_values.append(values[i])
 *     return conn_values             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_conn_values);
  __pyx_r = __pyx_v_conn_values;
  goto __pyx_L0;

  /* "cavd/netstorage.pyx":882
 *     return c_Ri,c_Rf,c_Rif
 * 
 * def connection_values_list(filename, vornet):             # <<<<<<<<<<<<<<
 *     conn_values = []
 *     if isinstance(filename, unicode):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cavd.netstorage.connection_values_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_conn_values);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4cavd_10netstorage_Atom(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4cavd_10netstorage_4Atom_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cavd_10netstorage_Atom(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4cavd_10netstorage_4Atom_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4cavd_10netstorage_4Atom_cart_coords(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_4Atom_11cart_coords_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_4Atom_cart_coords(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_4Atom_11cart_coords_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_4Atom_frac_coords(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_4Atom_11frac_coords_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_4Atom_frac_coords(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_4Atom_11frac_coords_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_4Atom_radius(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_4Atom_6radius_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_4Atom_radius(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_4Atom_6radius_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_4Atom_atom_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_4Atom_9atom_type_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_4Atom_atom_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_4Atom_9atom_type_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_4Atom_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_4Atom_5label_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_4Atom_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_4Atom_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_4Atom_specialID(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_4Atom_9specialID_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_4Atom_specialID(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_4Atom_9specialID_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_4Atom_mass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_4Atom_4mass_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_4Atom_mass(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_4Atom_4mass_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_4Atom_charge(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_4Atom_6charge_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_4Atom_charge(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_4Atom_6charge_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4cavd_10netstorage_Atom[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cavd_10netstorage_4Atom_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cavd_10netstorage_4Atom_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cavd_10netstorage_Atom[] = {
  {(char *)"cart_coords", __pyx_getprop_4cavd_10netstorage_4Atom_cart_coords, __pyx_setprop_4cavd_10netstorage_4Atom_cart_coords, (char *)0, 0},
  {(char *)"frac_coords", __pyx_getprop_4cavd_10netstorage_4Atom_frac_coords, __pyx_setprop_4cavd_10netstorage_4Atom_frac_coords, (char *)0, 0},
  {(char *)"radius", __pyx_getprop_4cavd_10netstorage_4Atom_radius, __pyx_setprop_4cavd_10netstorage_4Atom_radius, (char *)0, 0},
  {(char *)"atom_type", __pyx_getprop_4cavd_10netstorage_4Atom_atom_type, __pyx_setprop_4cavd_10netstorage_4Atom_atom_type, (char *)0, 0},
  {(char *)"label", __pyx_getprop_4cavd_10netstorage_4Atom_label, __pyx_setprop_4cavd_10netstorage_4Atom_label, (char *)0, 0},
  {(char *)"specialID", __pyx_getprop_4cavd_10netstorage_4Atom_specialID, __pyx_setprop_4cavd_10netstorage_4Atom_specialID, (char *)0, 0},
  {(char *)"mass", __pyx_getprop_4cavd_10netstorage_4Atom_mass, __pyx_setprop_4cavd_10netstorage_4Atom_mass, (char *)0, 0},
  {(char *)"charge", __pyx_getprop_4cavd_10netstorage_4Atom_charge, __pyx_setprop_4cavd_10netstorage_4Atom_charge, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cavd_10netstorage_Atom = {
  PyVarObject_HEAD_INIT(0, 0)
  "cavd.netstorage.Atom", /*tp_name*/
  sizeof(struct __pyx_obj_4cavd_10netstorage_Atom), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cavd_10netstorage_Atom, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Class to store the information about atom (or ion) in a structure.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cavd_10netstorage_Atom, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cavd_10netstorage_Atom, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cavd_10netstorage_4Atom_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cavd_10netstorage_Atom, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4cavd_10netstorage_AtomNetwork(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4cavd_10netstorage_11AtomNetwork_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cavd_10netstorage_AtomNetwork(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4cavd_10netstorage_11AtomNetwork_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11AtomNetwork_lattice_para(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11AtomNetwork_12lattice_para_1__get__(o);
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11AtomNetwork_lattice_angle(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11AtomNetwork_13lattice_angle_1__get__(o);
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11AtomNetwork_lattice(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11AtomNetwork_7lattice_1__get__(o);
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11AtomNetwork_atoms_num(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11AtomNetwork_9atoms_num_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_11AtomNetwork_atoms_num(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_11AtomNetwork_9atoms_num_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11AtomNetwork_atoms(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11AtomNetwork_5atoms_1__get__(o);
}

static PyMethodDef __pyx_methods_4cavd_10netstorage_AtomNetwork[] = {
  {"copy", (PyCFunction)__pyx_pw_4cavd_10netstorage_11AtomNetwork_7copy, METH_NOARGS, __pyx_doc_4cavd_10netstorage_11AtomNetwork_6copy},
  {"relative_to_absolute", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_11AtomNetwork_9relative_to_absolute, METH_VARARGS|METH_KEYWORDS, 0},
  {"absolute_to_relative", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_11AtomNetwork_11absolute_to_relative, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_from_CIF", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_11AtomNetwork_13read_from_CIF, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cavd_10netstorage_11AtomNetwork_12read_from_CIF},
  {"read_from_ARC", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_11AtomNetwork_15read_from_ARC, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cavd_10netstorage_11AtomNetwork_14read_from_ARC},
  {"read_from_CSSR", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_11AtomNetwork_17read_from_CSSR, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cavd_10netstorage_11AtomNetwork_16read_from_CSSR},
  {"read_from_V1", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_11AtomNetwork_19read_from_V1, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cavd_10netstorage_11AtomNetwork_18read_from_V1},
  {"write_to_CSSR", (PyCFunction)__pyx_pw_4cavd_10netstorage_11AtomNetwork_21write_to_CSSR, METH_O, __pyx_doc_4cavd_10netstorage_11AtomNetwork_20write_to_CSSR},
  {"write_to_CIF", (PyCFunction)__pyx_pw_4cavd_10netstorage_11AtomNetwork_23write_to_CIF, METH_O, __pyx_doc_4cavd_10netstorage_11AtomNetwork_22write_to_CIF},
  {"write_to_V1", (PyCFunction)__pyx_pw_4cavd_10netstorage_11AtomNetwork_25write_to_V1, METH_O, __pyx_doc_4cavd_10netstorage_11AtomNetwork_24write_to_V1},
  {"write_to_XYZ", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_11AtomNetwork_27write_to_XYZ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cavd_10netstorage_11AtomNetwork_26write_to_XYZ},
  {"write_to_VTK", (PyCFunction)__pyx_pw_4cavd_10netstorage_11AtomNetwork_29write_to_VTK, METH_O, __pyx_doc_4cavd_10netstorage_11AtomNetwork_28write_to_VTK},
  {"write_to_MOPAC", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_11AtomNetwork_31write_to_MOPAC, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cavd_10netstorage_11AtomNetwork_30write_to_MOPAC},
  {"writeAtomNetVaspFile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_11AtomNetwork_33writeAtomNetVaspFile, METH_VARARGS|METH_KEYWORDS, 0},
  {"calculate_free_sphere_parameters", (PyCFunction)__pyx_pw_4cavd_10netstorage_11AtomNetwork_35calculate_free_sphere_parameters, METH_O, __pyx_doc_4cavd_10netstorage_11AtomNetwork_34calculate_free_sphere_parameters},
  {"through_VorNet", (PyCFunction)__pyx_pw_4cavd_10netstorage_11AtomNetwork_37through_VorNet, METH_O, __pyx_doc_4cavd_10netstorage_11AtomNetwork_36through_VorNet},
  {"perform_voronoi_decomposition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_11AtomNetwork_39perform_voronoi_decomposition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cavd_10netstorage_11AtomNetwork_38perform_voronoi_decomposition},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cavd_10netstorage_11AtomNetwork_41__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cavd_10netstorage_11AtomNetwork_43__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cavd_10netstorage_AtomNetwork[] = {
  {(char *)"lattice_para", __pyx_getprop_4cavd_10netstorage_11AtomNetwork_lattice_para, 0, (char *)0, 0},
  {(char *)"lattice_angle", __pyx_getprop_4cavd_10netstorage_11AtomNetwork_lattice_angle, 0, (char *)0, 0},
  {(char *)"lattice", __pyx_getprop_4cavd_10netstorage_11AtomNetwork_lattice, 0, (char *)0, 0},
  {(char *)"atoms_num", __pyx_getprop_4cavd_10netstorage_11AtomNetwork_atoms_num, __pyx_setprop_4cavd_10netstorage_11AtomNetwork_atoms_num, (char *)0, 0},
  {(char *)"atoms", __pyx_getprop_4cavd_10netstorage_11AtomNetwork_atoms, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cavd_10netstorage_AtomNetwork = {
  PyVarObject_HEAD_INIT(0, 0)
  "cavd.netstorage.AtomNetwork", /*tp_name*/
  sizeof(struct __pyx_obj_4cavd_10netstorage_AtomNetwork), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cavd_10netstorage_AtomNetwork, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Class to store and manipulate the input atom network.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cavd_10netstorage_AtomNetwork, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cavd_10netstorage_AtomNetwork, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cavd_10netstorage_11AtomNetwork_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cavd_10netstorage_AtomNetwork, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4cavd_10netstorage_VoronoiNode(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4cavd_10netstorage_11VoronoiNode_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cavd_10netstorage_VoronoiNode(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4cavd_10netstorage_11VoronoiNode_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11VoronoiNode_coords(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11VoronoiNode_6coords_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_11VoronoiNode_coords(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_11VoronoiNode_6coords_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11VoronoiNode_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11VoronoiNode_5label_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_11VoronoiNode_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_11VoronoiNode_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11VoronoiNode_radius(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11VoronoiNode_6radius_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_11VoronoiNode_radius(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_11VoronoiNode_6radius_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4cavd_10netstorage_VoronoiNode[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cavd_10netstorage_11VoronoiNode_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cavd_10netstorage_11VoronoiNode_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cavd_10netstorage_VoronoiNode[] = {
  {(char *)"coords", __pyx_getprop_4cavd_10netstorage_11VoronoiNode_coords, __pyx_setprop_4cavd_10netstorage_11VoronoiNode_coords, (char *)0, 0},
  {(char *)"label", __pyx_getprop_4cavd_10netstorage_11VoronoiNode_label, __pyx_setprop_4cavd_10netstorage_11VoronoiNode_label, (char *)0, 0},
  {(char *)"radius", __pyx_getprop_4cavd_10netstorage_11VoronoiNode_radius, __pyx_setprop_4cavd_10netstorage_11VoronoiNode_radius, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cavd_10netstorage_VoronoiNode = {
  PyVarObject_HEAD_INIT(0, 0)
  "cavd.netstorage.VoronoiNode", /*tp_name*/
  sizeof(struct __pyx_obj_4cavd_10netstorage_VoronoiNode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cavd_10netstorage_VoronoiNode, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Class to store the voronoi nodes with coordinates and radius\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cavd_10netstorage_VoronoiNode, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cavd_10netstorage_VoronoiNode, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cavd_10netstorage_11VoronoiNode_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cavd_10netstorage_VoronoiNode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4cavd_10netstorage_VoronoiNetwork(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cavd_10netstorage_VoronoiNetwork(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4cavd_10netstorage_14VoronoiNetwork_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4cavd_10netstorage_14VoronoiNetwork_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_14VoronoiNetwork_5nodes_1__get__(o);
}

static PyObject *__pyx_getprop_4cavd_10netstorage_14VoronoiNetwork_edges(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_14VoronoiNetwork_5edges_1__get__(o);
}

static PyMethodDef __pyx_methods_4cavd_10netstorage_VoronoiNetwork[] = {
  {"size", (PyCFunction)__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_7size, METH_NOARGS, 0},
  {"prune", (PyCFunction)__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_9prune, METH_O, __pyx_doc_4cavd_10netstorage_14VoronoiNetwork_8prune},
  {"analyze_writeto_XYZ", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_11analyze_writeto_XYZ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cavd_10netstorage_14VoronoiNetwork_10analyze_writeto_XYZ},
  {"write_to_XYZ", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_13write_to_XYZ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cavd_10netstorage_14VoronoiNetwork_12write_to_XYZ},
  {"perform_voronoi_decomposition", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_15perform_voronoi_decomposition, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cavd_10netstorage_14VoronoiNetwork_14perform_voronoi_decomposition},
  {"parse_symmetry", (PyCFunction)__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_17parse_symmetry, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_19__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cavd_10netstorage_14VoronoiNetwork_21__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cavd_10netstorage_VoronoiNetwork[] = {
  {(char *)"nodes", __pyx_getprop_4cavd_10netstorage_14VoronoiNetwork_nodes, 0, (char *)0, 0},
  {(char *)"edges", __pyx_getprop_4cavd_10netstorage_14VoronoiNetwork_edges, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cavd_10netstorage_VoronoiNetwork = {
  PyVarObject_HEAD_INIT(0, 0)
  "cavd.netstorage.VoronoiNetwork", /*tp_name*/
  sizeof(struct __pyx_obj_4cavd_10netstorage_VoronoiNetwork), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cavd_10netstorage_VoronoiNetwork, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Class to store the Voronoi network generated from Voronoi decomposition\n    of atom network.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cavd_10netstorage_VoronoiNetwork, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cavd_10netstorage_VoronoiNetwork, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cavd_10netstorage_14VoronoiNetwork_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cavd_10netstorage_VoronoiNetwork, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4cavd_10netstorage_VoronoiEdge(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4cavd_10netstorage_11VoronoiEdge_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cavd_10netstorage_VoronoiEdge(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4cavd_10netstorage_11VoronoiEdge_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11VoronoiEdge_origin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11VoronoiEdge_6origin_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_11VoronoiEdge_origin(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_11VoronoiEdge_6origin_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11VoronoiEdge_ending(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11VoronoiEdge_6ending_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_11VoronoiEdge_ending(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_11VoronoiEdge_6ending_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11VoronoiEdge_radius(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11VoronoiEdge_6radius_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_11VoronoiEdge_radius(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_11VoronoiEdge_6radius_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11VoronoiEdge_leng(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11VoronoiEdge_4leng_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_11VoronoiEdge_leng(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_11VoronoiEdge_4leng_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11VoronoiEdge_delta_uc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11VoronoiEdge_8delta_uc_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_11VoronoiEdge_delta_uc(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_11VoronoiEdge_8delta_uc_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cavd_10netstorage_11VoronoiEdge_bot_coords(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cavd_10netstorage_11VoronoiEdge_10bot_coords_1__get__(o);
}

static int __pyx_setprop_4cavd_10netstorage_11VoronoiEdge_bot_coords(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cavd_10netstorage_11VoronoiEdge_10bot_coords_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4cavd_10netstorage_VoronoiEdge[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cavd_10netstorage_11VoronoiEdge_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cavd_10netstorage_11VoronoiEdge_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cavd_10netstorage_VoronoiEdge[] = {
  {(char *)"origin", __pyx_getprop_4cavd_10netstorage_11VoronoiEdge_origin, __pyx_setprop_4cavd_10netstorage_11VoronoiEdge_origin, (char *)0, 0},
  {(char *)"ending", __pyx_getprop_4cavd_10netstorage_11VoronoiEdge_ending, __pyx_setprop_4cavd_10netstorage_11VoronoiEdge_ending, (char *)0, 0},
  {(char *)"radius", __pyx_getprop_4cavd_10netstorage_11VoronoiEdge_radius, __pyx_setprop_4cavd_10netstorage_11VoronoiEdge_radius, (char *)0, 0},
  {(char *)"leng", __pyx_getprop_4cavd_10netstorage_11VoronoiEdge_leng, __pyx_setprop_4cavd_10netstorage_11VoronoiEdge_leng, (char *)0, 0},
  {(char *)"delta_uc", __pyx_getprop_4cavd_10netstorage_11VoronoiEdge_delta_uc, __pyx_setprop_4cavd_10netstorage_11VoronoiEdge_delta_uc, (char *)0, 0},
  {(char *)"bot_coords", __pyx_getprop_4cavd_10netstorage_11VoronoiEdge_bot_coords, __pyx_setprop_4cavd_10netstorage_11VoronoiEdge_bot_coords, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cavd_10netstorage_VoronoiEdge = {
  PyVarObject_HEAD_INIT(0, 0)
  "cavd.netstorage.VoronoiEdge", /*tp_name*/
  sizeof(struct __pyx_obj_4cavd_10netstorage_VoronoiEdge), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cavd_10netstorage_VoronoiEdge, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Class to store the voronoi edges with some atrribute\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cavd_10netstorage_VoronoiEdge, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cavd_10netstorage_VoronoiEdge, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cavd_10netstorage_11VoronoiEdge_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cavd_10netstorage_VoronoiEdge, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition *__pyx_freelist_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition[8];
static int __pyx_freecount_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition = 0;

static PyObject *__pyx_tp_new_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition)))) {
    o = (PyObject*)__pyx_freelist_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition[--__pyx_freecount_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition];
    memset(o, 0, sizeof(struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition(PyObject *o) {
  struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition *p = (struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_edge_center);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition)))) {
    __pyx_freelist_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition[__pyx_freecount_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition++] = ((struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition *p = (struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition *)o;
  if (p->__pyx_v_edge_center) {
    e = (*v)(p->__pyx_v_edge_center, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition *p = (struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition *)o;
  tmp = ((PyObject*)p->__pyx_v_edge_center);
  p->__pyx_v_edge_center = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition = {
  PyVarObject_HEAD_INIT(0, 0)
  "cavd.netstorage.__pyx_scope_struct__perform_voronoi_decomposition", /*tp_name*/
  sizeof(struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition, /*tp_traverse*/
  __pyx_tp_clear_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr *__pyx_freelist_4cavd_10netstorage___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_4cavd_10netstorage___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_4cavd_10netstorage___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4cavd_10netstorage___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_4cavd_10netstorage___pyx_scope_struct_1_genexpr[--__pyx_freecount_4cavd_10netstorage___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4cavd_10netstorage___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4cavd_10netstorage___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_4cavd_10netstorage___pyx_scope_struct_1_genexpr[__pyx_freecount_4cavd_10netstorage___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4cavd_10netstorage___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4cavd_10netstorage___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "cavd.netstorage.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_4cavd_10netstorage___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cavd_10netstorage___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cavd_10netstorage___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cavd_10netstorage___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_netstorage(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_netstorage},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "netstorage",
    __pyx_k_Cython_file_defining_methods_fo, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Atom, __pyx_k_Atom, sizeof(__pyx_k_Atom), 0, 0, 1, 1},
  {&__pyx_n_s_AtomNetwork, __pyx_k_AtomNetwork, sizeof(__pyx_k_AtomNetwork), 0, 0, 1, 1},
  {&__pyx_kp_s_Bharat_Medasani, __pyx_k_Bharat_Medasani, sizeof(__pyx_k_Bharat_Medasani), 0, 0, 1, 0},
  {&__pyx_kp_s_Dec_12_2013, __pyx_k_Dec_12_2013, sizeof(__pyx_k_Dec_12_2013), 0, 0, 1, 0},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_PerformVDError, __pyx_k_PerformVDError, sizeof(__pyx_k_PerformVDError), 0, 0, 1, 1},
  {&__pyx_kp_s_This_value_is_not_supposed_to_be, __pyx_k_This_value_is_not_supposed_to_be, sizeof(__pyx_k_This_value_is_not_supposed_to_be), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_VoronoiEdge, __pyx_k_VoronoiEdge, sizeof(__pyx_k_VoronoiEdge), 0, 0, 1, 1},
  {&__pyx_n_s_VoronoiNetwork, __pyx_k_VoronoiNetwork, sizeof(__pyx_k_VoronoiNetwork), 0, 0, 1, 1},
  {&__pyx_n_s_VoronoiNode, __pyx_k_VoronoiNode, sizeof(__pyx_k_VoronoiNode), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_atmnet, __pyx_k_atmnet, sizeof(__pyx_k_atmnet), 0, 0, 1, 1},
  {&__pyx_n_s_atmnet_copy, __pyx_k_atmnet_copy, sizeof(__pyx_k_atmnet_copy), 0, 0, 1, 1},
  {&__pyx_n_s_author, __pyx_k_author, sizeof(__pyx_k_author), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_c_Rf, __pyx_k_c_Rf, sizeof(__pyx_k_c_Rf), 0, 0, 1, 1},
  {&__pyx_n_s_c_Ri, __pyx_k_c_Ri, sizeof(__pyx_k_c_Ri), 0, 0, 1, 1},
  {&__pyx_n_s_c_Rif, __pyx_k_c_Rif, sizeof(__pyx_k_c_Rif), 0, 0, 1, 1},
  {&__pyx_n_s_c_atmnet_ptr, __pyx_k_c_atmnet_ptr, sizeof(__pyx_k_c_atmnet_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_c_fname, __pyx_k_c_fname, sizeof(__pyx_k_c_fname), 0, 0, 1, 1},
  {&__pyx_n_s_cavd_netstorage, __pyx_k_cavd_netstorage, sizeof(__pyx_k_cavd_netstorage), 0, 0, 1, 1},
  {&__pyx_kp_s_cavd_netstorage_pyx, __pyx_k_cavd_netstorage_pyx, sizeof(__pyx_k_cavd_netstorage_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_conn_values, __pyx_k_conn_values, sizeof(__pyx_k_conn_values), 0, 0, 1, 1},
  {&__pyx_n_s_connection_values, __pyx_k_connection_values, sizeof(__pyx_k_connection_values), 0, 0, 1, 1},
  {&__pyx_n_s_connection_values_list, __pyx_k_connection_values_list, sizeof(__pyx_k_connection_values_list), 0, 0, 1, 1},
  {&__pyx_n_s_cutoff_radius, __pyx_k_cutoff_radius, sizeof(__pyx_k_cutoff_radius), 0, 0, 1, 1},
  {&__pyx_n_s_date, __pyx_k_date, sizeof(__pyx_k_date), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_email, __pyx_k_email, sizeof(__pyx_k_email), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_is_duplicate_perimeter_atoms, __pyx_k_is_duplicate_perimeter_atoms, sizeof(__pyx_k_is_duplicate_perimeter_atoms), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_maintainer, __pyx_k_maintainer, sizeof(__pyx_k_maintainer), 0, 0, 1, 1},
  {&__pyx_kp_s_mbkumar_gmail_com, __pyx_k_mbkumar_gmail_com, sizeof(__pyx_k_mbkumar_gmail_com), 0, 0, 1, 0},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_perform_voronoi_decomposition, __pyx_k_perform_voronoi_decomposition, sizeof(__pyx_k_perform_voronoi_decomposition), 0, 0, 1, 1},
  {&__pyx_n_s_perform_voronoi_decomposition_lo, __pyx_k_perform_voronoi_decomposition_lo, sizeof(__pyx_k_perform_voronoi_decomposition_lo), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_probeRad, __pyx_k_probeRad, sizeof(__pyx_k_probeRad), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_rad_file, __pyx_k_rad_file, sizeof(__pyx_k_rad_file), 0, 0, 1, 1},
  {&__pyx_n_s_rad_flag, __pyx_k_rad_flag, sizeof(__pyx_k_rad_flag), 0, 0, 1, 1},
  {&__pyx_n_s_radialFlag, __pyx_k_radialFlag, sizeof(__pyx_k_radialFlag), 0, 0, 1, 1},
  {&__pyx_n_s_radii, __pyx_k_radii, sizeof(__pyx_k_radii), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read_from_ARC, __pyx_k_read_from_ARC, sizeof(__pyx_k_read_from_ARC), 0, 0, 1, 1},
  {&__pyx_n_s_read_from_CIF, __pyx_k_read_from_CIF, sizeof(__pyx_k_read_from_CIF), 0, 0, 1, 1},
  {&__pyx_n_s_read_from_CSSR, __pyx_k_read_from_CSSR, sizeof(__pyx_k_read_from_CSSR), 0, 0, 1, 1},
  {&__pyx_n_s_read_from_V1, __pyx_k_read_from_V1, sizeof(__pyx_k_read_from_V1), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_saveVorCells, __pyx_k_saveVorCells, sizeof(__pyx_k_saveVorCells), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shift_x, __pyx_k_shift_x, sizeof(__pyx_k_shift_x), 0, 0, 1, 1},
  {&__pyx_n_s_shift_y, __pyx_k_shift_y, sizeof(__pyx_k_shift_y), 0, 0, 1, 1},
  {&__pyx_n_s_shift_z, __pyx_k_shift_z, sizeof(__pyx_k_shift_z), 0, 0, 1, 1},
  {&__pyx_n_s_storeRadius, __pyx_k_storeRadius, sizeof(__pyx_k_storeRadius), 0, 0, 1, 1},
  {&__pyx_n_s_subNo, __pyx_k_subNo, sizeof(__pyx_k_subNo), 0, 0, 1, 1},
  {&__pyx_n_s_substituteSeed, __pyx_k_substituteSeed, sizeof(__pyx_k_substituteSeed), 0, 0, 1, 1},
  {&__pyx_n_s_substitute_atoms, __pyx_k_substitute_atoms, sizeof(__pyx_k_substitute_atoms), 0, 0, 1, 1},
  {&__pyx_n_s_substitutionNo, __pyx_k_substitutionNo, sizeof(__pyx_k_substitutionNo), 0, 0, 1, 1},
  {&__pyx_n_s_supercell_flag, __pyx_k_supercell_flag, sizeof(__pyx_k_supercell_flag), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_vornet, __pyx_k_vornet, sizeof(__pyx_k_vornet), 0, 0, 1, 1},
  {&__pyx_n_s_vornet_ptr, __pyx_k_vornet_ptr, sizeof(__pyx_k_vornet_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 149, __pyx_L1_error)
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) __PYX_ERR(1, 219, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 786, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "cavd/netstorage.pyx":834
 * 
 * 
 * def substitute_atoms(atmnet, substituteSeed, radialFlag):             # <<<<<<<<<<<<<<
 *     """
 *     Attempt to substitute every other Si atom with Al atom.
 */
  __pyx_tuple__11 = PyTuple_Pack(7, __pyx_n_s_atmnet, __pyx_n_s_substituteSeed, __pyx_n_s_radialFlag, __pyx_n_s_substitutionNo, __pyx_n_s_atmnet_copy, __pyx_n_s_c_atmnet_ptr, __pyx_n_s_subNo); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cavd_netstorage_pyx, __pyx_n_s_substitute_atoms, 834, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(1, 834, __pyx_L1_error)

  /* "cavd/netstorage.pyx":864
 *     return atmnet_copy, subNo
 * 
 * def connection_values(filename, vornet):             # <<<<<<<<<<<<<<
 *     """
 * 	Computes the Radius of the largest included sphere, free sphere
 */
  __pyx_tuple__13 = PyTuple_Pack(7, __pyx_n_s_filename, __pyx_n_s_vornet, __pyx_n_s_vornet_ptr, __pyx_n_s_c_fname, __pyx_n_s_c_Ri, __pyx_n_s_c_Rf, __pyx_n_s_c_Rif); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cavd_netstorage_pyx, __pyx_n_s_connection_values, 864, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(1, 864, __pyx_L1_error)

  /* "cavd/netstorage.pyx":882
 *     return c_Ri,c_Rf,c_Rif
 * 
 * def connection_values_list(filename, vornet):             # <<<<<<<<<<<<<<
 *     conn_values = []
 *     if isinstance(filename, unicode):
 */
  __pyx_tuple__15 = PyTuple_Pack(7, __pyx_n_s_filename, __pyx_n_s_vornet, __pyx_n_s_conn_values, __pyx_n_s_vornet_ptr, __pyx_n_s_c_fname, __pyx_n_s_values, __pyx_n_s_i); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cavd_netstorage_pyx, __pyx_n_s_connection_values_list, 882, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(1, 882, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_4cavd_10netstorage_Atom) < 0) __PYX_ERR(1, 32, __pyx_L1_error)
  __pyx_type_4cavd_10netstorage_Atom.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cavd_10netstorage_Atom.tp_dictoffset && __pyx_type_4cavd_10netstorage_Atom.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cavd_10netstorage_Atom.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Atom, (PyObject *)&__pyx_type_4cavd_10netstorage_Atom) < 0) __PYX_ERR(1, 32, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cavd_10netstorage_Atom) < 0) __PYX_ERR(1, 32, __pyx_L1_error)
  __pyx_ptype_4cavd_10netstorage_Atom = &__pyx_type_4cavd_10netstorage_Atom;
  if (PyType_Ready(&__pyx_type_4cavd_10netstorage_AtomNetwork) < 0) __PYX_ERR(1, 107, __pyx_L1_error)
  __pyx_type_4cavd_10netstorage_AtomNetwork.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cavd_10netstorage_AtomNetwork.tp_dictoffset && __pyx_type_4cavd_10netstorage_AtomNetwork.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cavd_10netstorage_AtomNetwork.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AtomNetwork, (PyObject *)&__pyx_type_4cavd_10netstorage_AtomNetwork) < 0) __PYX_ERR(1, 107, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cavd_10netstorage_AtomNetwork) < 0) __PYX_ERR(1, 107, __pyx_L1_error)
  __pyx_ptype_4cavd_10netstorage_AtomNetwork = &__pyx_type_4cavd_10netstorage_AtomNetwork;
  if (PyType_Ready(&__pyx_type_4cavd_10netstorage_VoronoiNode) < 0) __PYX_ERR(1, 583, __pyx_L1_error)
  __pyx_type_4cavd_10netstorage_VoronoiNode.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cavd_10netstorage_VoronoiNode.tp_dictoffset && __pyx_type_4cavd_10netstorage_VoronoiNode.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cavd_10netstorage_VoronoiNode.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_VoronoiNode, (PyObject *)&__pyx_type_4cavd_10netstorage_VoronoiNode) < 0) __PYX_ERR(1, 583, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cavd_10netstorage_VoronoiNode) < 0) __PYX_ERR(1, 583, __pyx_L1_error)
  __pyx_ptype_4cavd_10netstorage_VoronoiNode = &__pyx_type_4cavd_10netstorage_VoronoiNode;
  if (PyType_Ready(&__pyx_type_4cavd_10netstorage_VoronoiNetwork) < 0) __PYX_ERR(1, 683, __pyx_L1_error)
  __pyx_type_4cavd_10netstorage_VoronoiNetwork.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cavd_10netstorage_VoronoiNetwork.tp_dictoffset && __pyx_type_4cavd_10netstorage_VoronoiNetwork.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cavd_10netstorage_VoronoiNetwork.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_VoronoiNetwork, (PyObject *)&__pyx_type_4cavd_10netstorage_VoronoiNetwork) < 0) __PYX_ERR(1, 683, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cavd_10netstorage_VoronoiNetwork) < 0) __PYX_ERR(1, 683, __pyx_L1_error)
  __pyx_ptype_4cavd_10netstorage_VoronoiNetwork = &__pyx_type_4cavd_10netstorage_VoronoiNetwork;
  if (PyType_Ready(&__pyx_type_4cavd_10netstorage_VoronoiEdge) < 0) __PYX_ERR(1, 620, __pyx_L1_error)
  __pyx_type_4cavd_10netstorage_VoronoiEdge.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cavd_10netstorage_VoronoiEdge.tp_dictoffset && __pyx_type_4cavd_10netstorage_VoronoiEdge.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cavd_10netstorage_VoronoiEdge.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_VoronoiEdge, (PyObject *)&__pyx_type_4cavd_10netstorage_VoronoiEdge) < 0) __PYX_ERR(1, 620, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cavd_10netstorage_VoronoiEdge) < 0) __PYX_ERR(1, 620, __pyx_L1_error)
  __pyx_ptype_4cavd_10netstorage_VoronoiEdge = &__pyx_type_4cavd_10netstorage_VoronoiEdge;
  if (PyType_Ready(&__pyx_type_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition) < 0) __PYX_ERR(1, 489, __pyx_L1_error)
  __pyx_type_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition.tp_dictoffset && __pyx_type_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition = &__pyx_type_4cavd_10netstorage___pyx_scope_struct__perform_voronoi_decomposition;
  if (PyType_Ready(&__pyx_type_4cavd_10netstorage___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(1, 527, __pyx_L1_error)
  __pyx_type_4cavd_10netstorage___pyx_scope_struct_1_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cavd_10netstorage___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_4cavd_10netstorage___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cavd_10netstorage___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4cavd_10netstorage___pyx_scope_struct_1_genexpr = &__pyx_type_4cavd_10netstorage___pyx_scope_struct_1_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cavd.geometry"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_4cavd_8geometry_Xyz = __Pyx_ImportType(__pyx_t_1, "cavd.geometry", "Xyz", sizeof(struct __pyx_obj_4cavd_8geometry_Xyz), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cavd_8geometry_Xyz) __PYX_ERR(2, 22, __pyx_L1_error)
  __pyx_ptype_4cavd_8geometry_Point = __Pyx_ImportType(__pyx_t_1, "cavd.geometry", "Point", sizeof(struct __pyx_obj_4cavd_8geometry_Point), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cavd_8geometry_Point) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cavd.voronoicell"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_4cavd_11voronoicell_VorFace = __Pyx_ImportType(__pyx_t_1, "cavd.voronoicell", "VorFace", sizeof(struct __pyx_obj_4cavd_11voronoicell_VorFace), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cavd_11voronoicell_VorFace) __PYX_ERR(3, 39, __pyx_L1_error)
  __pyx_ptype_4cavd_11voronoicell_VorCell = __Pyx_ImportType(__pyx_t_1, "cavd.voronoicell", "VorCell", sizeof(struct __pyx_obj_4cavd_11voronoicell_VorCell), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cavd_11voronoicell_VorCell) __PYX_ERR(3, 42, __pyx_L1_error)
  __pyx_ptype_4cavd_11voronoicell_BasicVCell = __Pyx_ImportType(__pyx_t_1, "cavd.voronoicell", "BasicVCell", sizeof(struct __pyx_obj_4cavd_11voronoicell_BasicVCell), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cavd_11voronoicell_BasicVCell) __PYX_ERR(3, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initnetstorage(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initnetstorage(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_netstorage(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_netstorage(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_netstorage(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'netstorage' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_netstorage(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("netstorage", __pyx_methods, __pyx_k_Cython_file_defining_methods_fo, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cavd__netstorage) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cavd.netstorage")) {
      if (unlikely(PyDict_SetItemString(modules, "cavd.netstorage", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "cavd/netstorage.pyx":6
 * """
 * 
 * __author__ = "Bharat Medasani"             # <<<<<<<<<<<<<<
 * __maintainer__ = "Bharat Medasani"
 * __email__ = "mbkumar@gmail.com"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Bharat_Medasani) < 0) __PYX_ERR(1, 6, __pyx_L1_error)

  /* "cavd/netstorage.pyx":7
 * 
 * __author__ = "Bharat Medasani"
 * __maintainer__ = "Bharat Medasani"             # <<<<<<<<<<<<<<
 * __email__ = "mbkumar@gmail.com"
 * __date__ = "Dec 12, 2013"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_maintainer, __pyx_kp_s_Bharat_Medasani) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

  /* "cavd/netstorage.pyx":8
 * __author__ = "Bharat Medasani"
 * __maintainer__ = "Bharat Medasani"
 * __email__ = "mbkumar@gmail.com"             # <<<<<<<<<<<<<<
 * __date__ = "Dec 12, 2013"
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_email, __pyx_kp_s_mbkumar_gmail_com) < 0) __PYX_ERR(1, 8, __pyx_L1_error)

  /* "cavd/netstorage.pyx":9
 * __maintainer__ = "Bharat Medasani"
 * __email__ = "mbkumar@gmail.com"
 * __date__ = "Dec 12, 2013"             # <<<<<<<<<<<<<<
 * 
 * from libcpp.vector cimport vector
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_date, __pyx_kp_s_Dec_12_2013) < 0) __PYX_ERR(1, 9, __pyx_L1_error)

  /* "cavd/netstorage.pyx":28
 * #Added at 20180807
 * #Customize an exception class
 * class PerformVDError(Exception):             # <<<<<<<<<<<<<<
 *     #print("Perform Voronoi Decompition failured!")
 *     pass
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PerformVDError, __pyx_n_s_PerformVDError, (PyObject *) NULL, __pyx_n_s_cavd_netstorage, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PerformVDError, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PerformVDError, __pyx_t_4) < 0) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cavd/netstorage.pyx":172
 * 
 *     @classmethod
 *     def read_from_CIF(cls, filename, radii, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork, __pyx_n_s_read_from_CIF); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "cavd/netstorage.pyx":171
 *         return [self.thisptr.xyz_to_abc(x, y, z).vals[0], self.thisptr.xyz_to_abc(x, y, z).vals[1], self.thisptr.xyz_to_abc(x, y, z).vals[2]]
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_CIF(cls, filename, radii, rad_flag=True, rad_file=None):
 *         """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork->tp_dict, __pyx_n_s_read_from_CIF, __pyx_t_2) < 0) __PYX_ERR(1, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cavd_10netstorage_AtomNetwork);

  /* "cavd/netstorage.pyx":224
 * 
 *     @classmethod
 *     def read_from_ARC(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork, __pyx_n_s_read_from_ARC); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "cavd/netstorage.pyx":223
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_ARC(cls, filename, rad_flag=True, rad_file=None):
 *         """
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork->tp_dict, __pyx_n_s_read_from_ARC, __pyx_t_1) < 0) __PYX_ERR(1, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4cavd_10netstorage_AtomNetwork);

  /* "cavd/netstorage.pyx":263
 * 
 *     @classmethod
 *     def read_from_CSSR(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork, __pyx_n_s_read_from_CSSR); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "cavd/netstorage.pyx":262
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_CSSR(cls, filename, rad_flag=True, rad_file=None):
 *         """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork->tp_dict, __pyx_n_s_read_from_CSSR, __pyx_t_2) < 0) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cavd_10netstorage_AtomNetwork);

  /* "cavd/netstorage.pyx":303
 * 
 *     @classmethod
 *     def read_from_V1(cls, filename, rad_flag=True, rad_file=None):             # <<<<<<<<<<<<<<
 *         """
 *         Static method to create and populate the AtomNetwork with
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork, __pyx_n_s_read_from_V1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "cavd/netstorage.pyx":302
 *         return atmnet
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_from_V1(cls, filename, rad_flag=True, rad_file=None):
 *         """
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cavd_10netstorage_AtomNetwork->tp_dict, __pyx_n_s_read_from_V1, __pyx_t_1) < 0) __PYX_ERR(1, 303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4cavd_10netstorage_AtomNetwork);

  /* "cavd/netstorage.pyx":789
 * 
 *     @classmethod
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):             # <<<<<<<<<<<<<<
 *         """
 *         Performs weighted voronoi decomposition of atoms in the AtomNetwork
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_4cavd_10netstorage_VoronoiNetwork, __pyx_n_s_perform_voronoi_decomposition); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "cavd/netstorage.pyx":788
 *             raise ValueError
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def perform_voronoi_decomposition(cls, atmnet, saveVorCells=False):
 *         """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cavd_10netstorage_VoronoiNetwork->tp_dict, __pyx_n_s_perform_voronoi_decomposition, __pyx_t_2) < 0) __PYX_ERR(1, 789, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cavd_10netstorage_VoronoiNetwork);

  /* "cavd/netstorage.pyx":834
 * 
 * 
 * def substitute_atoms(atmnet, substituteSeed, radialFlag):             # <<<<<<<<<<<<<<
 *     """
 *     Attempt to substitute every other Si atom with Al atom.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_4cavd_10netstorage_1substitute_atoms, NULL, __pyx_n_s_cavd_netstorage); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_substitute_atoms, __pyx_t_2) < 0) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cavd/netstorage.pyx":864
 *     return atmnet_copy, subNo
 * 
 * def connection_values(filename, vornet):             # <<<<<<<<<<<<<<
 *     """
 * 	Computes the Radius of the largest included sphere, free sphere
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_4cavd_10netstorage_3connection_values, NULL, __pyx_n_s_cavd_netstorage); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_connection_values, __pyx_t_2) < 0) __PYX_ERR(1, 864, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cavd/netstorage.pyx":882
 *     return c_Ri,c_Rf,c_Rif
 * 
 * def connection_values_list(filename, vornet):             # <<<<<<<<<<<<<<
 *     conn_values = []
 *     if isinstance(filename, unicode):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_4cavd_10netstorage_5connection_values_list, NULL, __pyx_n_s_cavd_netstorage); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_connection_values_list, __pyx_t_2) < 0) __PYX_ERR(1, 882, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cavd/netstorage.pyx":1
 * """             # <<<<<<<<<<<<<<
 * Cython file defining methods for AtomNetwork and VoronoiNetowrk
 * declared in netstorage.pxd file.
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cavd.netstorage", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cavd.netstorage");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if (likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __Pyx_CyFunction_USED
    else if (__Pyx_CyFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#endif
    PyErr_SetString(PyExc_TypeError,
                   "Class-level classmethod() can only be called on "
                   "a method_descriptor or instance method.");
    return NULL;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Print */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* PrintOne */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
